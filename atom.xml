<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>tuzi</title>
  
  <subtitle>兔子BLOG</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://woshilishang123.github.io/"/>
  <updated>2019-07-17T03:36:42.248Z</updated>
  <id>https://woshilishang123.github.io/</id>
  
  <author>
    <name>tuzi</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法导论思考题一</title>
    <link href="https://woshilishang123.github.io/2019/07/17/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA%E6%80%9D%E8%80%83%E9%A2%98%E4%B8%80/"/>
    <id>https://woshilishang123.github.io/2019/07/17/算法导论思考题一/</id>
    <published>2019-07-17T03:14:20.000Z</published>
    <updated>2019-07-17T03:36:42.248Z</updated>
    
    <content type="html"><![CDATA[<p>最近，开始学习《算法导论》，书中每章节都有些许思考题，而书上空白区域有限，遂打算将思考题及其答案贴在博客里面。</p><p>照例刘亦菲开头</p><p><img src="https://hbimg.huabanimg.com/efb5619ab695d5340970a9a7f7c59b9dd80b0d6622f53-L44rvE_fw658" alt="titu"></p><a id="more"></a><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><h4 id="1-1"><a href="#1-1" class="headerlink" title="1.1"></a>1.1</h4><p><strong>题目一：给出现实生活中需要排序的一个例子或者现实生活中需要计算凸壳的一个例子。</strong></p><p><strong>解：</strong> 成绩排名，凸壳暂时没想到。</p><p><strong>题目二：除速度外，在真实环境中还可能使用哪些其他有关效率的量度？</strong></p><p><strong>解：</strong> 时间？？？</p><p><strong>题目三：选择一种你已知的数据结构，并讨论其优势和局限。</strong></p><p><strong>解：</strong> 单链表 随机存取和查找效率低。</p><p><strong>题目四：前面给出的最短路径与旅行商问题有哪些相似之处？又有哪些不同？</strong></p><p><strong>解：</strong> 相似：求解最优路径；不同：前置是寻找两点之间的最短路径，后置是寻找从起始点开始遍历所里节点的最优路径。</p><p><strong>问题五：提供一个现实生活的问题，其中只有最佳解才行。然后提供一个问题，其中近似最佳的一个解也足够好。</strong></p><p><strong>解：</strong> 销售状元和TSP问题。</p><p>碎碎念：看了这几个简单问题，发现自己脑袋里面真的没什么东西。加油吧！</p><h3 id="未完待续。。。。"><a href="#未完待续。。。。" class="headerlink" title="未完待续。。。。"></a>未完待续。。。。</h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近，开始学习《算法导论》，书中每章节都有些许思考题，而书上空白区域有限，遂打算将思考题及其答案贴在博客里面。&lt;/p&gt;
&lt;p&gt;照例刘亦菲开头&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hbimg.huabanimg.com/efb5619ab695d5340970a9a7f7c59b9dd80b0d6622f53-L44rvE_fw658&quot; alt=&quot;titu&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="算法导论" scheme="https://woshilishang123.github.io/categories/%E7%AE%97%E6%B3%95%E5%AF%BC%E8%AE%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>vue笔记-基础篇（一）</title>
    <link href="https://woshilishang123.github.io/2019/07/16/vue%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%AF%87/"/>
    <id>https://woshilishang123.github.io/2019/07/16/vue笔记-基础篇/</id>
    <published>2019-07-16T07:07:18.000Z</published>
    <updated>2019-07-16T07:57:52.851Z</updated>
    
    <content type="html"><![CDATA[<p>本篇主要介绍Vue的一些基础知识，比如模板语法，计算属性和侦听器。</p><p><img src="https://hbimg.huabanimg.com/cee82624c91eb78caff593d92d5190e23184f5ea37324-8fyesl_fw658" alt="titu"></p><a id="more"></a><h3 id="Vue-js是什么？"><a href="#Vue-js是什么？" class="headerlink" title="Vue.js是什么？"></a>Vue.js是什么？</h3><p>Vue (读音 /vjuː/，类似于 <strong>view</strong>) 是一套用于构建用户界面的<strong>渐进式框架</strong>。</p><h3 id="生命周期图示"><a href="#生命周期图示" class="headerlink" title="生命周期图示"></a>生命周期图示</h3><p>下图展示了实例的生命周期。你不需要立马弄明白所有的东西，不过随着你的不断学习和使用，它的参考价值会越来越高。（我也不懂）</p><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt="shengmingzhouqi"></p><h3 id="模板语法"><a href="#模板语法" class="headerlink" title="模板语法"></a>模板语法</h3><p>Vue.js 使用了基于 HTML 的模板语法，允许开发者声明式地将 DOM 绑定至底层 Vue 实例的数据。所有 Vue.js 的模板都是合法的 HTML ，所以能被遵循规范的浏览器和 HTML 解析器解析。</p><p>在底层的实现上，Vue 将模板编译成虚拟 DOM 渲染函数。结合响应系统，Vue 能够智能地计算出最少需要重新渲染多少组件，并把 DOM 操作次数减到最少。</p><h4 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h4><h5 id="文本"><a href="#文本" class="headerlink" title="文本"></a>文本</h5><p>数据绑定最常见的形式就是使用双大括号的文本插值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>Message: &#123;&#123; msg &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>双大括号标签将会被替代为对应数据对象上 <code>msg</code> 属性的值。无论何时，绑定的数据对象上 <code>msg</code>属性发生了改变，插值处的内容都会更新。</p><h5 id="原始HTML"><a href="#原始HTML" class="headerlink" title="原始HTML"></a>原始HTML</h5><p>双大括号会将数据解释为普通文本（进行了转义），而非 HTML 代码。为了输出真正的 HTML，你需要使用 <code>v-html</code>指令（不进行转义）：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using mustaches: &#123;&#123; rawHtml &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Using v-html directive: <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-html</span>=<span class="string">"rawHtml"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>This should be red.<span class="tag">&lt;/<span class="name">span</span>&gt;</span> <span class="comment">&lt;!-- 这是rawHtml --&gt;</span></span><br><span class="line"></span><br><span class="line">输出分别为：</span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">"color: red"</span>&gt;</span>This should be red.<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">This should be red.（红色字体）</span><br></pre></td></tr></table></figure><h4 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h4><p>v-text：只能插入文本，会将内容转义成文本</p><p>v-html：可以插入HTML语句，不会转义</p><p>v-on:click=”函数名” 绑定一个点击事件，v-on:可以简写成@</p><p>v-bind:title=”title” 表示title属性绑定了title，可以缩写成： 属性绑定</p><p>v-model 双向数据绑定</p><h3 id="计算属性和侦听器"><a href="#计算属性和侦听器" class="headerlink" title="计算属性和侦听器"></a>计算属性和侦听器</h3><h4 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h4><p>对于变量，如下例中的<code>message</code>任何复杂逻辑运算，你都应当使用<strong>计算属性</strong>。避免直接在模板里面运算，造成模板过于臃肿。（MVVM）</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: &#123;</span><br><span class="line">    message: <span class="string">'Hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    <span class="comment">// 计算属性的 getter</span></span><br><span class="line">    reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>结果：</p><p>Original message: “Hello”</p><p>Computed reversed message: “olleH”</p><h4 id="侦听器"><a href="#侦听器" class="headerlink" title="侦听器"></a>侦听器</h4><p>Vue 提供了一种方式来观察和响应 Vue 实例上的数据变动：<strong>侦听属性</strong>（watch）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">        el:<span class="string">"#root"</span>,</span><br><span class="line">        data:&#123;</span><br><span class="line">            firstName:<span class="string">''</span>,</span><br><span class="line">            lastName:<span class="string">''</span>,</span><br><span class="line">            count:<span class="number">0</span></span><br><span class="line">    &#125;,</span><br><span class="line">        computed:&#123;<span class="comment">/*计算属性*/</span></span><br><span class="line">            fullName : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.firstName +<span class="string">' '</span>+ <span class="keyword">this</span>.lastName</span><br><span class="line">    &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        watch:&#123;<span class="comment">/*侦听属性*/</span></span><br><span class="line">            fullName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.count++</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇主要介绍Vue的一些基础知识，比如模板语法，计算属性和侦听器。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hbimg.huabanimg.com/cee82624c91eb78caff593d92d5190e23184f5ea37324-8fyesl_fw658&quot; alt=&quot;titu&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="https://woshilishang123.github.io/categories/Vue/"/>
    
    
  </entry>
  
  <entry>
    <title>MATLAB-模拟退火算法</title>
    <link href="https://woshilishang123.github.io/2019/05/26/MATLAB-%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB%E7%AE%97%E6%B3%95/"/>
    <id>https://woshilishang123.github.io/2019/05/26/MATLAB-模拟退火算法/</id>
    <published>2019-05-26T11:10:36.000Z</published>
    <updated>2019-05-26T12:41:00.309Z</updated>
    
    <content type="html"><![CDATA[<p>模拟退火算法（Simulate Anneal，SA）是一种通用概率演算法，用来在一个大的搜寻空间内找寻命题的<strong>最优解</strong></p><p><img src="https://hbimg.huabanimg.com/e79a7209c923d50041d9de7bab7e82e821403db41d12ac-lHIZx9_fw658" alt="titu"></p><a id="more"></a><h3 id="模拟退火算法原理"><a href="#模拟退火算法原理" class="headerlink" title="模拟退火算法原理"></a>模拟退火算法原理</h3><p> &emsp;&emsp;模拟退火(Simulated Annealing简称SA)算法是基于蒙特卡罗迭代算法求解的一种启发式随机搜索算法，算法思想最早在1953年由N·Metropolis等人提出的。算法出发点是物理学中的退火过程，即对固体物质进行退火处理时，通常足先将它加温，使其粒了可自由运动，然后降温，粒子逐渐形成低能态的品体，若在凝结点附近温度下得足够慢，则固体物质一定会形成域低能量的基态。<br>&emsp;&emsp; 模拟退火算法的基本思想是从一个给定解开始，从邻域中随机产生另一个解，接受Metropolis准则允许目标函数在有限范围内变坏，它由控制参数t决定，其作用类似于物理过程中的温度T,对于控制参数的每一取值，算法持续进行“产生-判断-接受或舍去”的迭代过程，对应着固体在某一恒定温度下的趋于热平衡的过程，当控制参数逐渐减小并趋于0时，系统越来越趋于平衡态，最后系统状态对应于优化问题的全局最优解。</p><h3 id="模拟退火算法流程"><a href="#模拟退火算法流程" class="headerlink" title="模拟退火算法流程"></a>模拟退火算法流程</h3><p>（1） 给定模型每一个参数变化范围， 在这个范围内随机选择一个初始模型m0， 并计算相应的目标函数值 E(m0) 。</p><p>（2） 对当前模型进行扰动产生一个新模型 m， 计算相应的目标函数值E(m)， 得到 ∆ E = E(m)-E(m0).</p><p>（3） 若 ∆E&lt;0， 则新模型被接受； 若∆E&gt;0， 则新模型 m 按概率P=  exp(∆ E/T)进行接受，T为温度。当模型被接受时， 置m0=m,E(m0)=E(m)。</p><p>（4） 在温度T下， 重复一定次数的扰动和接受过程， 即重复步骤（2）、（3）。</p><p>（5） 缓慢降低温度 T 。</p><p>（6） 重复步骤（2）、（5）， 直至收敛条件满足为止。</p><p><img src="/2019/05/26/MATLAB-模拟退火算法/模拟流程图.png" alt="liuc"></p><h3 id="非线性规划方程求解"><a href="#非线性规划方程求解" class="headerlink" title="非线性规划方程求解"></a>非线性规划方程求解</h3><h4 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">min</span> f(x)=x1^<span class="number">2</span>+x2^<span class="number">2</span>+<span class="number">8</span></span><br><span class="line"> </span><br><span class="line">st.</span><br><span class="line"> </span><br><span class="line">x1^<span class="number">2</span>-x2&gt;=<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">-x1-x2^<span class="number">2</span>+<span class="number">2</span>=<span class="number">0</span></span><br><span class="line"> </span><br><span class="line">x1,x2&gt;=<span class="number">0</span></span><br></pre></td></tr></table></figure><h4 id="MATLAB代码"><a href="#MATLAB代码" class="headerlink" title="MATLAB代码"></a>MATLAB代码</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br><span class="line">clc</span><br><span class="line"> </span><br><span class="line"><span class="comment">%生成初始解</span></span><br><span class="line">sol_new2=<span class="number">1</span>;<span class="comment">%（1）解空间（初始解）</span></span><br><span class="line">sol_new1=<span class="number">2</span>-sol_new2^<span class="number">2</span>;</span><br><span class="line">sol_current1 = sol_new1; </span><br><span class="line">sol_best1 = sol_new1;</span><br><span class="line">sol_current2 = sol_new2; </span><br><span class="line">sol_best2 = sol_new2;</span><br><span class="line">E_current = <span class="built_in">inf</span>;</span><br><span class="line">E_best = <span class="built_in">inf</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">rand</span>(<span class="string">'state'</span>,sum(clock)); <span class="comment">%初始化随机数发生器</span></span><br><span class="line">t=<span class="number">90</span>; <span class="comment">%初始温度</span></span><br><span class="line">tf=<span class="number">89.9</span>; <span class="comment">%结束温度</span></span><br><span class="line">a = <span class="number">0.99</span>; <span class="comment">%温度下降比例</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">while</span> t&gt;=tf<span class="comment">%（7）结束条件</span></span><br><span class="line">    <span class="keyword">for</span> r=<span class="number">1</span>:<span class="number">1000</span> <span class="comment">%退火次数</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">%产生随机扰动（3）新解的产生</span></span><br><span class="line">        sol_new2=sol_new2+<span class="built_in">rand</span>*<span class="number">0.2</span>;</span><br><span class="line">        sol_new1=<span class="number">2</span>-sol_new2^<span class="number">2</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">%检查是否满足约束</span></span><br><span class="line">        <span class="keyword">if</span> sol_new1^<span class="number">2</span>-sol_new2&gt;=<span class="number">0</span> &amp;&amp; -sol_new1-sol_new2^<span class="number">2</span>+<span class="number">2</span>==<span class="number">0</span> &amp;&amp; sol_new1&gt;=<span class="number">0</span> &amp;&amp;sol_new2&gt;=<span class="number">0</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            sol_new2=<span class="built_in">rand</span>*<span class="number">2</span>;</span><br><span class="line">            sol_new1=<span class="number">2</span>-sol_new2^<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">%退火过程</span></span><br><span class="line">        E_new=sol_new1^<span class="number">2</span>+sol_new2^<span class="number">2</span>+<span class="number">8</span>;<span class="comment">%（2）目标函数</span></span><br><span class="line">        <span class="keyword">if</span> E_new&lt;E_current<span class="comment">%（5）接受准则</span></span><br><span class="line">                E_current=E_new;</span><br><span class="line">                sol_current1=sol_new1;</span><br><span class="line">                sol_current2=sol_new2;</span><br><span class="line">                <span class="keyword">if</span> E_new&lt;E_best</span><br><span class="line">                    <span class="comment">%把冷却过程中最好的解保存下来</span></span><br><span class="line">                    E_best=E_new;</span><br><span class="line">                    sol_best1=sol_new1;</span><br><span class="line">                    sol_best2=sol_new2;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">rand</span>&lt;<span class="built_in">exp</span>(-(E_new-E_current)/t)<span class="comment">%（4）代价函数差</span></span><br><span class="line">                    E_current=E_new;</span><br><span class="line">                    sol_current1=sol_new1;</span><br><span class="line">                    sol_current2=sol_new2;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    sol_new1=sol_current1;</span><br><span class="line">                    sol_new2=sol_current2;</span><br><span class="line">                <span class="keyword">end</span></span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">plot</span>(r,E_best,<span class="string">'*'</span>)</span><br><span class="line">        <span class="built_in">hold</span> on</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line">    t=t*a;<span class="comment">%（6）降温</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'最优解为：'</span>)</span><br><span class="line"><span class="built_in">disp</span>(sol_best1)</span><br><span class="line"><span class="built_in">disp</span>(sol_best2)</span><br><span class="line"><span class="built_in">disp</span>(<span class="string">'目标表达式的最小值等于：'</span>)</span><br><span class="line"><span class="built_in">disp</span>(E_best)</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">最优解为：</span><br><span class="line">    <span class="number">1.0053</span></span><br><span class="line"></span><br><span class="line">    <span class="number">0.9974</span></span><br><span class="line"></span><br><span class="line">目标表达式的最小值等于：</span><br><span class="line">   <span class="number">10.0053</span></span><br></pre></td></tr></table></figure><p><img src="/2019/05/26/MATLAB-模拟退火算法/yunxing1.jpg" alt="yunxjieg"></p><p><img src="/2019/05/26/MATLAB-模拟退火算法/yunxing2.jpg" alt="yunxjieg"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;模拟退火算法（Simulate Anneal，SA）是一种通用概率演算法，用来在一个大的搜寻空间内找寻命题的&lt;strong&gt;最优解&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://hbimg.huabanimg.com/e79a7209c923d50041d9de7bab7e82e821403db41d12ac-lHIZx9_fw658&quot; alt=&quot;titu&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="MATLAB" scheme="https://woshilishang123.github.io/categories/MATLAB/"/>
    
    
  </entry>
  
  <entry>
    <title>scrapy简介</title>
    <link href="https://woshilishang123.github.io/2019/05/04/scrapy%E7%AE%80%E4%BB%8B/"/>
    <id>https://woshilishang123.github.io/2019/05/04/scrapy简介/</id>
    <published>2019-05-04T11:38:03.000Z</published>
    <updated>2019-05-04T11:42:17.081Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://hbimg.huabanimg.com/9b3b7525c1f4ec73f9e09c81015d6d2f9294a530dfbe9-5nlHny_fw658" alt="liuyifei"></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://hbimg.huabanimg.com/9b3b7525c1f4ec73f9e09c81015d6d2f9294a530dfbe9-5nlHny_fw658&quot; alt=&quot;liuyifei&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="scrapy" scheme="https://woshilishang123.github.io/categories/scrapy/"/>
    
    
  </entry>
  
  <entry>
    <title>ES6扩展</title>
    <link href="https://woshilishang123.github.io/2019/04/29/ES6%E6%89%A9%E5%B1%95/"/>
    <id>https://woshilishang123.github.io/2019/04/29/ES6扩展/</id>
    <published>2019-04-29T08:59:10.000Z</published>
    <updated>2019-04-29T08:59:10.655Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ES6简介</title>
    <link href="https://woshilishang123.github.io/2019/04/20/ES6%E7%AE%80%E4%BB%8B/"/>
    <id>https://woshilishang123.github.io/2019/04/20/ES6简介/</id>
    <published>2019-04-20T06:04:25.000Z</published>
    <updated>2019-07-16T08:00:28.940Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://hbimg.huabanimg.com/089b1adedc7566b702bfb428cb0979f0c0b68e1a90dc8-ZhSinM_fw658" alt="liuyifei"></p><a id="more"></a><p>ECMAScript 6.0（以下简称 ES6）是 JavaScript 语言的下一代标准，已经在 2015 年 6 月正式发布了。它的目标，是使得 JavaScript 语言可以用来编写复杂的大型应用程序，成为企业级开发语言。</p><h3 id="let和const命令"><a href="#let和const命令" class="headerlink" title="let和const命令"></a>let和const命令</h3><p>ES2015(ES6) 新增加了两个重要的 JavaScript 关键字: <strong>let</strong> 和 <strong>const</strong>。</p><p>let 声明的变量只在 let 命令所在的代码块内有效。</p><p>const 声明一个只读的常量，一旦声明，常量的值就不能改变。</p><h4 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h4><p>这部分以介绍let和var的区别进行展开。</p><h5 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h5><p><code>let</code>所声明的变量，只在<code>let</code>命令所在的<mark>代码块</mark>内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line"><span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">1</span>;</span><br><span class="line">    a; <span class="comment">//10</span></span><br><span class="line">    b;<span class="comment">//1</span></span><br><span class="line">&#125;</span><br><span class="line">a <span class="comment">// ReferenceError: a is not defined.</span></span><br><span class="line">b <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p><code>for</code>循环的计数器很适合使用<code>let</code>命令。</p><p><code>for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="string">'abc'</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br><span class="line"><span class="comment">// abc</span></span><br></pre></td></tr></table></figure><p>上面代码正确运行，输出了 3 次<code>abc</code>。这<strong>表明函数内部的变量<code>i</code>与循环变量<code>i</code>不在同一个作用域</strong>，有各自单独的作用域。</p><p><strong>不存在变量提升</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// var 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(foo); <span class="comment">// 输出undefined</span></span><br><span class="line"><span class="keyword">var</span> foo = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// let 的情况</span></span><br><span class="line"><span class="built_in">console</span>.log(bar); <span class="comment">// 报错ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> bar = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p><strong>不允许重复声明</strong></p><p>注：ES6 明确规定，如果区块中存在<code>let</code>和<code>const</code>命令，这个区块对这些命令声明的变量，从一开始就形成了封闭作用域。凡是在声明之前就使用这些变量，就会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  tmp = <span class="string">'abc'</span>; <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">func</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="const命令"><a href="#const命令" class="headerlink" title="const命令"></a>const命令</h4><h5 id="基本用法-1"><a href="#基本用法-1" class="headerlink" title="基本用法"></a>基本用法</h5><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.1415</span>;</span><br><span class="line">PI <span class="comment">// 3.1415</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3</span>;</span><br><span class="line"><span class="comment">// TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure><p>上面代码表明改变常量的值会报错。</p><p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo;</span><br><span class="line"><span class="comment">// SyntaxError: Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure><p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> MAX = <span class="number">5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MAX <span class="comment">// Uncaught ReferenceError: MAX is not defined</span></span><br></pre></td></tr></table></figure><p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。</p><p><strong>注</strong>：const 如何做到变量在声明初始化之后不允许改变的？其实 const 其实保证的不是变量的值不变，而是保证变量指向的内存地址所保存的数据不允许改动。</p><h3 id="ES6解构赋值"><a href="#ES6解构赋值" class="headerlink" title="ES6解构赋值"></a>ES6解构赋值</h3><h4 id="基本用法-2"><a href="#基本用法-2" class="headerlink" title="基本用法"></a>基本用法</h4><p>ES6 允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p><p>以前，为变量赋值，只能直接指定值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>ES6 允许写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure><p>上面代码表示，可以从数组中提取值，按照对应位置，对变量赋值。</p><p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。下面是一些使用嵌套数组进行解构的例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo, [[bar], baz]] = [<span class="number">1</span>, [[<span class="number">2</span>], <span class="number">3</span>]];</span><br><span class="line">foo <span class="comment">// 1</span></span><br><span class="line">bar <span class="comment">// 2</span></span><br><span class="line">baz <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [ , , third] = [<span class="string">"foo"</span>, <span class="string">"bar"</span>, <span class="string">"baz"</span>];</span><br><span class="line">third <span class="comment">// "baz"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [head, ...tail] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">head <span class="comment">// 1</span></span><br><span class="line">tail <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">'a'</span>];</span><br><span class="line">x <span class="comment">// "a"</span></span><br><span class="line">y <span class="comment">// undefined</span></span><br><span class="line">z <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>如果解构不成功，变量的值就等于<code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo] = [];</span><br><span class="line"><span class="keyword">let</span> [bar, foo] = [<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>以上两种情况都属于解构不成功，<code>foo</code>的值都会等于<code>undefined</code>。</p><p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line">y <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [a, [b], d] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br><span class="line">a <span class="comment">// 1</span></span><br><span class="line">b <span class="comment">// 2</span></span><br><span class="line">d <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>如果等号的右边不是数组，那么将会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h4><p>解构赋值允许指定默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [foo = <span class="literal">true</span>] = [];</span><br><span class="line">foo <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>]; <span class="comment">// x='a', y='b'</span></span><br><span class="line"><span class="keyword">let</span> [x, y = <span class="string">'b'</span>] = [<span class="string">'a'</span>, <span class="literal">undefined</span>]; <span class="comment">// x='a', y='b'</span></span><br></pre></td></tr></table></figure><p>注意，ES6 内部使用严格相等运算符（<code>===</code>），判断一个位置是否有值。所以，<strong>只有当一个数组成员严格等于<code>undefined</code>，默认值才会生效。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">undefined</span>];</span><br><span class="line">x <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>] = [<span class="literal">null</span>];</span><br><span class="line">x <span class="comment">// null</span></span><br></pre></td></tr></table></figure><p>上面代码中，如果一个数组成员是<code>null</code>，默认值就不会生效，因为<code>null</code>不严格等于<code>undefined</code>。</p><p>默认值可以引用解构赋值的其他变量，但该变量必须已经声明。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [];     <span class="comment">// x=1; y=1</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">2</span>];    <span class="comment">// x=2; y=2</span></span><br><span class="line"><span class="keyword">let</span> [x = <span class="number">1</span>, y = x] = [<span class="number">1</span>, <span class="number">2</span>]; <span class="comment">// x=1; y=2</span></span><br><span class="line"><span class="keyword">let</span> [x = y, y = <span class="number">1</span>] = [];     <span class="comment">// ReferenceError: y is not defined</span></span><br></pre></td></tr></table></figure><p>上面最后一个表达式之所以会报错，是因为<code>x</code>用<code>y</code>做默认值时，<code>y</code>还没有声明。</p><h4 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h4><p>解构不仅可以用于数组，还可以用于对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; foo, bar &#125; = &#123; <span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> &#125;;</span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br></pre></td></tr></table></figure><p>对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; bar, foo &#125; = &#123; <span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> &#125;;</span><br><span class="line">foo <span class="comment">// "aaa"</span></span><br><span class="line">bar <span class="comment">// "bbb"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> &#125;;</span><br><span class="line">baz <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>如果解构失败，变量的值等于<code>undefined</code>。</p><p>如果变量名与属性名不一致，必须写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">foo</span>: baz &#125; = &#123; <span class="attr">foo</span>: <span class="string">'aaa'</span>, <span class="attr">bar</span>: <span class="string">'bbb'</span> &#125;;</span><br><span class="line">baz <span class="comment">// "aaa"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123; <span class="attr">first</span>: <span class="string">'hello'</span>, <span class="attr">last</span>: <span class="string">'world'</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">first</span>: f, <span class="attr">last</span>: l &#125; = obj;</span><br><span class="line">f <span class="comment">// 'hello'</span></span><br><span class="line">l <span class="comment">// 'world'</span></span><br></pre></td></tr></table></figure><p>解构也可以用于嵌套结构的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  p: [</span><br><span class="line">    <span class="string">'Hello'</span>,</span><br><span class="line">    &#123; <span class="attr">y</span>: <span class="string">'World'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br></pre></td></tr></table></figure><p>注意，这时<code>p</code>是模式，不是变量，因此不会被赋值。如果<code>p</code>也要作为变量赋值，可以写成下面这样。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; p, <span class="attr">p</span>: [x, &#123; y &#125;] &#125; = obj;</span><br><span class="line">x <span class="comment">// "Hello"</span></span><br><span class="line">y <span class="comment">// "World"</span></span><br><span class="line">p <span class="comment">// ["Hello", &#123;y: "World"&#125;]</span></span><br></pre></td></tr></table></figure><p>嵌套赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = [];</span><br><span class="line"></span><br><span class="line">(&#123; <span class="attr">foo</span>: obj.prop, <span class="attr">bar</span>: arr[<span class="number">0</span>] &#125; = &#123; <span class="attr">foo</span>: <span class="number">123</span>, <span class="attr">bar</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line">obj <span class="comment">// &#123;prop:123&#125;</span></span><br><span class="line">arr <span class="comment">// [true]</span></span><br></pre></td></tr></table></figure><h4 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h4><p>字符串也可以解构赋值。这是因为此时，字符串被转换成了一个类似数组的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> [a, b, c, d, e] = <span class="string">'hello'</span>;</span><br><span class="line">a <span class="comment">// "h"</span></span><br><span class="line">b <span class="comment">// "e"</span></span><br><span class="line">c <span class="comment">// "l"</span></span><br><span class="line">d <span class="comment">// "l"</span></span><br><span class="line">e <span class="comment">// "o"</span></span><br></pre></td></tr></table></figure><p>数组的对象都有一个<code>length</code>属性，因此还可以对这个属性解构赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span> : len&#125; = <span class="string">'hello'</span>;</span><br><span class="line">len <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><h4 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h4><p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</span><br><span class="line">s === <span class="built_in">Number</span>.prototype.toString <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>;</span><br><span class="line">s === <span class="built_in">Boolean</span>.prototype.toString <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>上面代码中，数值和布尔值的包装对象都有<code>toString</code>属性，因此变量<code>s</code>都能取到值。</p><p>解构赋值的规则是，只要等号右边的值不是对象或数组，就先将其转为对象。由于<code>undefined</code>和<code>null</code>无法转为对象，所以对它们进行解构赋值，都会报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: x &#125; = <span class="literal">undefined</span>; <span class="comment">// TypeError</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: y &#125; = <span class="literal">null</span>; <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h4 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h4><p>函数的参数也可以使用解构赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y]</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add([<span class="number">1</span>, <span class="number">2</span>]); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数<code>add</code>的参数表面上是一个数组，但在传入参数的那一刻，数组参数就被解构成变量<code>x</code>和<code>y</code>。对于函数内部的代码来说，它们能感受到的参数就是<code>x</code>和<code>y</code>。</p><p>下面是另一个例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>]].map(<span class="function">(<span class="params">[a, b]</span>) =&gt;</span> a + b);</span><br><span class="line"><span class="comment">// [ 3, 7 ]</span></span><br></pre></td></tr></table></figure><p>函数参数的解构也可以使用默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, 0]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [0, 0]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure><p>上面代码中，函数<code>move</code>的参数是一个对象，通过对这个对象进行解构，得到变量<code>x</code>和<code>y</code>的值。如果解构失败，<code>x</code>和<code>y</code>等于默认值。</p><p>注意，下面的写法会得到不一样的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;); <span class="comment">// [3, 8]</span></span><br><span class="line">move(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;); <span class="comment">// [3, undefined]</span></span><br><span class="line">move(&#123;&#125;); <span class="comment">// [undefined, undefined]</span></span><br><span class="line">move(); <span class="comment">// [0, 0]</span></span><br></pre></td></tr></table></figure><p>上面代码是为函数<code>move</code>的参数指定默认值，而不是为变量<code>x</code>和<code>y</code>指定默认值，所以会得到与前一种写法不同的结果。</p><p><code>undefined</code>就会触发函数参数的默认值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">3</span>].map(<span class="function">(<span class="params">x = <span class="string">'yes'</span></span>) =&gt;</span> x);</span><br><span class="line"><span class="comment">// [ 1, 'yes', 3 ]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://hbimg.huabanimg.com/089b1adedc7566b702bfb428cb0979f0c0b68e1a90dc8-ZhSinM_fw658&quot; alt=&quot;liuyifei&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="ECMAScript" scheme="https://woshilishang123.github.io/categories/ECMAScript/"/>
    
    
  </entry>
  
  <entry>
    <title>JSON与AHAX</title>
    <link href="https://woshilishang123.github.io/2019/04/08/JSON%E4%B8%8EAHAX/"/>
    <id>https://woshilishang123.github.io/2019/04/08/JSON与AHAX/</id>
    <published>2019-04-08T10:45:08.000Z</published>
    <updated>2019-04-08T10:45:08.224Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>less基础</title>
    <link href="https://woshilishang123.github.io/2019/04/01/less%E5%9F%BA%E7%A1%80/"/>
    <id>https://woshilishang123.github.io/2019/04/01/less基础/</id>
    <published>2019-04-01T07:53:34.000Z</published>
    <updated>2019-04-01T07:53:34.238Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTML存储</title>
    <link href="https://woshilishang123.github.io/2019/04/01/HTML%E5%AD%98%E5%82%A8/"/>
    <id>https://woshilishang123.github.io/2019/04/01/HTML存储/</id>
    <published>2019-04-01T07:49:52.000Z</published>
    <updated>2019-04-01T07:49:52.438Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BootStrap（二）组件</title>
    <link href="https://woshilishang123.github.io/2019/03/27/BootStrap2/"/>
    <id>https://woshilishang123.github.io/2019/03/27/BootStrap2/</id>
    <published>2019-03-27T12:45:28.000Z</published>
    <updated>2019-03-27T12:58:29.721Z</updated>
    
    <content type="html"><![CDATA[<p>bootstrap无数可复用的组件，包括字体图标、下拉菜单、导航、警告框、弹出框等更多功能</p><p><img src="http://img.hb.aicdn.com/dafba2f5d9a96fb88858893d88b1d050c2750a2ea2ce-eavhIb_fw658" alt="liuyifei" title="logo"></p><a id="more"></a>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;bootstrap无数可复用的组件，包括字体图标、下拉菜单、导航、警告框、弹出框等更多功能&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.hb.aicdn.com/dafba2f5d9a96fb88858893d88b1d050c2750a2ea2ce-eavhIb_fw658&quot; alt=&quot;liuyifei&quot; title=&quot;logo&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BootStrap" scheme="https://woshilishang123.github.io/categories/BootStrap/"/>
    
    
      <category term="BootStrap" scheme="https://woshilishang123.github.io/tags/BootStrap/"/>
    
      <category term="前端" scheme="https://woshilishang123.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>BootStrap（一）-全局CSS样式（前半部分）</title>
    <link href="https://woshilishang123.github.io/2019/03/27/BootStrap1/"/>
    <id>https://woshilishang123.github.io/2019/03/27/BootStrap1/</id>
    <published>2019-03-27T11:14:28.000Z</published>
    <updated>2019-03-27T12:44:38.925Z</updated>
    
    <content type="html"><![CDATA[<p>Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。</p><p><img src="http://img.hb.aicdn.com/ea48fd458bd3709cf034407c9d6a9e4c9186438a25116-YuWAa9_fw658" alt="liuyifei" title="刘亦菲"></p><a id="more"></a><h3 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h3><h4 id="移动设备优先"><a href="#移动设备优先" class="headerlink" title="移动设备优先"></a>移动设备优先</h4><p><strong>bootstrap是移动设备优先的</strong> </p><p>为了确保适当的绘制和触屏缩放，需要在 <code>&lt;head&gt;</code> 之中<strong>添加 viewport 元数据标签</strong>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在移动设备浏览器上，通过为视口（viewport）设置 meta 属性为 <code>user-scalable=no</code> 可以禁用其缩放（zooming）功能。这样禁用缩放功能后，用户只能滚动屏幕，就能让你的网站看上去更像原生应用的感觉。注意，这种方式并不推荐所有网站使用，还是要看情况而定！</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="布局容器"><a href="#布局容器" class="headerlink" title="布局容器"></a>布局容器</h4><p>Bootstrap 需要为页面内容和栅格系统包裹一个 <code>.container</code> 容器。我们提供了两个作此用处的类。注意，由于 <code>padding</code> 等属性的原因，这两种容器类不能互相嵌套。</p><p><code>.container</code> 类用于固定宽度并支持响应式布局的容器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><code>.container-fluid</code> 类用于 100% 宽度，占据全部视口（viewport）的容器。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="栅格系统"><a href="#栅格系统" class="headerlink" title="栅格系统"></a>栅格系统</h3><p>Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。</p><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。</p><ul><li><mark>“行（row）”必须包含在 <code>.container</code> （固定宽度）或 <code>.container-fluid</code> （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。</mark></li><li>内容放置于“列（column）”内；只有“列（column）”可以作为行（row）”的直接子元素。</li><li>类似 <code>.row</code> 和 <code>.col-xs-4</code> 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。</li><li>通过为“列（column）”设置 <code>padding</code> 属性，从而创建列与列之间的间隔（gutter）。通过为 <code>.row</code> 元素设置负值 <code>margin</code> 从而抵消掉为 <code>.container</code> 元素设置的 <code>padding</code>，也就间接为“行（row）”所包含的“列（column）”抵消掉了<code>padding</code>。</li><li>负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。</li><li>栅格系统中的列是通过指定1到12的值来表示其跨越的范围。</li><li>如果一“行（row）”中包含了的“列（column）”大于 12，<mark>多余的“列（column）”所在的元素将被作为一个整体另起一行排列。</mark></li></ul><p>demo：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 固定宽度的栅格布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-6 col-md-4 col-lg-4"</span>&gt;</span>.col-xs-6 .col-sm-6 .col-md-4 .col-lg-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-6 col-md-4 col-lg-4"</span>&gt;</span>.col-xs-6 .col-sm-6 .col-md-4 .col-lg-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 100%宽度的栅格布局 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">    ...</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我也不太清除两者的区别，等我写个demo试试。</p><h4 id="响应式列重置"><a href="#响应式列重置" class="headerlink" title="响应式列重置"></a>响应式列重置</h4><p>在某些阈值时，某些列可能会出现比别的列高的情况。为了克服这一问题，建议联合使用 <code>.clearfix</code> 和 <a href="https://v3.bootcss.com/css/#responsive-utilities" target="_blank" rel="noopener">响应式工具类</a>。<!--此处链接建议改成我的博客的链接 --></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span>&gt;</span>.col-xs-6 .col-sm-3Resize your viewport or check it out on your phone for an example.<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span>&gt;</span>.col-xs-6 .col-sm-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"clearfix visible-xs-block"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span>&gt;</span>.col-xs-6 .col-sm-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-6 col-sm-3"</span>&gt;</span>.col-xs-6 .col-sm-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列偏移-嵌套列-列排列"><a href="#列偏移-嵌套列-列排列" class="headerlink" title="列偏移 嵌套列 列排列"></a>列偏移 嵌套列 列排列</h4><h5 id="列偏移"><a href="#列偏移" class="headerlink" title="列偏移"></a>列偏移</h5><p>使用 <code>.col-md-offset-*</code> 类可以将列向右侧偏移。这些类实际是通过使用 <code>*</code> 选择器为当前元素增加了左侧的边距（margin）。例如，<code>.col-md-offset-4</code> 类将 <code>.col-md-4</code> 元素向右侧偏移了4个列（column）的宽度。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4"</span>&gt;</span>.col-md-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-4 col-md-offset-4"</span>&gt;</span>.col-md-4 .col-md-offset-4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="嵌套列"><a href="#嵌套列" class="headerlink" title="嵌套列"></a>嵌套列</h5><p>被嵌套的行（row）所包含的列（column）的个数不能超过12（其实，没有要求你必须占满12列）。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-sm-9"</span>&gt;</span></span><br><span class="line">    Level 1: .col-sm-9</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-8 col-sm-6"</span>&gt;</span></span><br><span class="line">        Level 2: .col-xs-8 .col-sm-6</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-xs-4 col-sm-6"</span>&gt;</span></span><br><span class="line">        Level 2: .col-xs-4 .col-sm-6</span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="列排列"><a href="#列排列" class="headerlink" title="列排列"></a>列排列</h5><p>通过使用 <code>.col-md-push-*</code> 和 <code>.col-md-pull-*</code> 类就可以很容易的改变列（column）的顺序。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-9 col-md-push-3"</span>&gt;</span>.col-md-9 .col-md-push-3<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 向右push推移动3个栅格 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-md-3 col-md-pull-9"</span>&gt;</span>.col-md-3 .col-md-pull-9<span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!-- 向左pull拉移动9个栅格 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="排版"><a href="#排版" class="headerlink" title="排版"></a>排版</h3><h4 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h4><p>HTML 中的所有标题标签，<code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code> 均可使用。另外，还提供了 <code>.h1</code> 到 <code>.h6</code> 类，为的是给内联（inline）属性的文本赋予标题的样式。</p><p>在标题内还可以包含 <code>&lt;small&gt;</code> 标签或赋予 <code>.small</code> 类的元素，可以用来标记副标题。</p><h4 id="页面主体"><a href="#页面主体" class="headerlink" title="页面主体"></a>页面主体</h4><p>Bootstrap 将全局 <code>font-size</code> 设置为 <strong>14px</strong>，<code>line-height</code> 设置为 <strong>1.428</strong>。这些属性直接赋予 <code>&lt;body&gt;</code> 元素和所有段落元素。另外，<code>&lt;p&gt;</code> （段落）元素还被设置了等于 1/2 行高（即 10px）的底部外边距（margin）。</p><p>通过添加 <code>.lead</code> 类可以让段落突出显示。</p><h4 id="内联文本元素"><a href="#内联文本元素" class="headerlink" title="内联文本元素"></a>内联文本元素</h4><h5 id="被删除的文字"><a href="#被删除的文字" class="headerlink" title="被删除的文字"></a>被删除的文字</h5><p><del>对于被删除的文本使用 <code>&lt;del&gt;</code> 标签。</del></p><h5 id="无用文本"><a href="#无用文本" class="headerlink" title="无用文本"></a>无用文本</h5><p><s>对于没有用的文本使用 <code>&lt;s&gt;</code> 标签</s></p><h5 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h5><p><ins>额外插入的文本使用 <code>&lt;ins&gt;</code> 标签。</ins></p><h5 id="带下划线的文本"><a href="#带下划线的文本" class="headerlink" title="带下划线的文本"></a>带下划线的文本</h5><p><u>为文本添加下划线，使用 <code>&lt;u&gt;</code> 标签。</u></p><h5 id="小号文本smell、着重strong、斜体em"><a href="#小号文本smell、着重strong、斜体em" class="headerlink" title="小号文本smell、着重strong、斜体em"></a>小号文本smell、着重strong、斜体em</h5><p><small>苍白如恶霸创建</small> <strong>文本粗不粗比较</strong><em>擦抹乘客我发你</em>测我看曾经为成为金额vd而维持你问u</p><p><code>&lt;b&gt;</code> 用于<b>高亮</b>单词或短语，不带有任何着重的意味；而 <code>&lt;i&gt;</code> 标签主要用于  <i>发言</i>、技术词汇等。</p><h4 id="对齐"><a href="#对齐" class="headerlink" title="对齐"></a>对齐</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-left"</span>&gt;</span>Left aligned text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-center"</span>&gt;</span>Center aligned text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-right"</span>&gt;</span>Right aligned text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-justify"</span>&gt;</span>Justified text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-nowrap"</span>&gt;</span>No wrap text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="改变大小写"><a href="#改变大小写" class="headerlink" title="改变大小写"></a>改变大小写</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-lowercase"</span>&gt;</span>Lowercased text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-uppercase"</span>&gt;</span>Uppercased text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"text-capitalize"</span>&gt;</span>Capitalized text.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="缩略语"><a href="#缩略语" class="headerlink" title="缩略语"></a>缩略语</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">"attribute"</span>&gt;</span>attr<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="地址"><a href="#地址" class="headerlink" title="地址"></a>地址</h4><p>让联系信息以最接近日常使用的格式呈现。在每行结尾添加 <code>&lt;br&gt;</code> 可以保留需要的样式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">strong</span>&gt;</span>Full Name<span class="tag">&lt;/<span class="name">strong</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:#"</span>&gt;</span>luobo@tuzi.com<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><p>将任何 HTML 元素包裹在 <code>&lt;blockquote&gt;</code> 中即可表现为引用样式。对于直接引用建议用 <code>&lt;p&gt;</code> 标签。</p><p>添加 <code>&lt;footer&gt;</code> 用于标明引用来源。来源的名称可以包裹进 <code>&lt;cite&gt;</code>标签中。</p><p>通过赋予 <code>.blockquote-reverse</code> 类可以让引用呈现内容右对齐的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span>Someone famous in <span class="tag">&lt;<span class="name">cite</span> <span class="attr">title</span>=<span class="string">"Source Title"</span>&gt;</span>Source Title<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">"blockquote-reverse"</span>&gt;</span></span><br><span class="line">  ...</span><br><span class="line"><span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无样式列表：只针对直接子元素li --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-unstyled"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--通过设置 display: inline-block; 并添加少量的内补（padding），将所有元素放置于同一行。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">"list-inline"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>...<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--带有描述的短语列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 水平排列的描述：.dl-horizontal 可以让 &lt;dl&gt; 内的短语及其描述排在一行。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">"dl-horizontal"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dt</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dt</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dd</span>&gt;</span>...<span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="自动截断"><a href="#自动截断" class="headerlink" title="自动截断"></a>自动截断</h5><p>通过 <code>text-overflow</code> 属性，水平排列的描述列表将会截断左侧太长的短语。在较窄的视口（viewport）内，列表将变为默认堆叠排列的布局方式。</p><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a><a href="<https://v3.bootcss.com/css/#forms>">表单</a></h3><p>响应式工具 辅助类 表单详见bootstrap（二）</p><h3 id="注：less部分详见less"><a href="#注：less部分详见less" class="headerlink" title="注：less部分详见less"></a>注：less部分详见<a href="#">less</a></h3>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.hb.aicdn.com/ea48fd458bd3709cf034407c9d6a9e4c9186438a25116-YuWAa9_fw658&quot; alt=&quot;liuyifei&quot; title=&quot;刘亦菲&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="BootStrap" scheme="https://woshilishang123.github.io/categories/BootStrap/"/>
    
    
      <category term="BootStrap" scheme="https://woshilishang123.github.io/tags/BootStrap/"/>
    
      <category term="前端" scheme="https://woshilishang123.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="简介" scheme="https://woshilishang123.github.io/tags/%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript对象</title>
    <link href="https://woshilishang123.github.io/2019/03/09/javaScript%E5%AF%B9%E8%B1%A1/"/>
    <id>https://woshilishang123.github.io/2019/03/09/javaScript对象/</id>
    <published>2019-03-09T02:59:02.000Z</published>
    <updated>2019-03-09T03:08:09.593Z</updated>
    
    <content type="html"><![CDATA[<p><strong>JavaScript 中的所有事物都是对象：字符串、数值、数组、函数…</strong></p><p><strong>此外，JavaScript 允许自定义对象。</strong></p><p><img src="/2019/03/09/javaScript对象/liuyifei.jpg" alt="titu" title="题图"></p><a id="more"></a><p>未完待续</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;JavaScript 中的所有事物都是对象：字符串、数值、数组、函数…&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;此外，JavaScript 允许自定义对象。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/09/javaScript对象/liuyifei.jpg&quot; alt=&quot;titu&quot; title=&quot;题图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://woshilishang123.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://woshilishang123.github.io/tags/JavaScript/"/>
    
      <category term="对象" scheme="https://woshilishang123.github.io/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript HTML DOM事件</title>
    <link href="https://woshilishang123.github.io/2019/03/09/javaScriptDOM/"/>
    <id>https://woshilishang123.github.io/2019/03/09/javaScriptDOM/</id>
    <published>2019-03-09T02:18:21.000Z</published>
    <updated>2019-03-09T02:58:15.661Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客主要讲解HTML DOM（文档对象模型）</p><p><img src="/2019/03/09/javaScriptDOM/liuyifei.jpg" alt="titu" title="题图"> </p><a id="more"></a><h3 id="HTML-DOM-（文档对象模型）"><a href="#HTML-DOM-（文档对象模型）" class="headerlink" title="HTML DOM （文档对象模型）"></a>HTML DOM （文档对象模型）</h3><p>当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。</p><p>HTML DOM 模型被构造为对象的树。</p><p><img src="/2019/03/09/javaScriptDOM/HTML DOM树.gif" alt="tree" title="HTML DOM树"></p><h4 id="JavaScript能够创建动态的HTML"><a href="#JavaScript能够创建动态的HTML" class="headerlink" title="JavaScript能够创建动态的HTML"></a>JavaScript能够创建动态的HTML</h4><ul><li>JavaScript 能够改变页面中的所有 HTML 元素</li><li>JavaScript 能够改变页面中的所有 HTML 属性</li><li>JavaScript 能够改变页面中的所有 CSS 样式</li><li>JavaScript 能够对页面中的所有事件做出反应</li></ul><h4 id="查找-HTML-元素"><a href="#查找-HTML-元素" class="headerlink" title="查找 HTML 元素"></a>查找 HTML 元素</h4><p>通常，通过 JavaScript，您需要操作 HTML 元素。</p><p>为了做到这件事情，您必须首先找到该元素。有三种方法来做这件事：</p><ul><li>通过 id 找到 HTML 元素</li><li>通过标签名找到 HTML 元素</li><li>通过类名找到 HTML 元素</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x=<span class="built_in">document</span>.getElementById(<span class="string">"main"</span>);</span><br><span class="line"><span class="keyword">var</span> z=<span class="built_in">document</span>.getElementsByClassName(<span class="string">"main"</span>);</span><br><span class="line"><span class="keyword">var</span> y=<span class="built_in">document</span>.getElementsByTagName(<span class="string">"p"</span>);</span><br></pre></td></tr></table></figure><h3 id="DOM-HTML"><a href="#DOM-HTML" class="headerlink" title="DOM HTML"></a>DOM HTML</h3><p><strong>HTML DOM 允许 JavaScript 改变 HTML 元素的内容。</strong></p><h4 id="改变-HTML-输出流"><a href="#改变-HTML-输出流" class="headerlink" title="改变 HTML 输出流"></a>改变 HTML 输出流</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.write(Date());//输出时间</span><br></pre></td></tr></table></figure><p><strong>提示：</strong>绝不要使用在文档加载之后使用 document.write()。这会覆盖该文档。</p><h4 id="改变-HTML-内容"><a href="#改变-HTML-内容" class="headerlink" title="改变 HTML 内容"></a>改变 HTML 内容</h4><p>修改 HTML 内容的最简单的方法时使用 innerHTML 属性。</p><p>如需改变 HTML 元素的内容，请使用这个语法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).innerHTML=<span class="keyword">new</span> HTML;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>).innerHTML=<span class="string">"New text!"</span>;</span><br></pre></td></tr></table></figure><h4 id="改变-HTML-属性"><a href="#改变-HTML-属性" class="headerlink" title="改变 HTML 属性"></a>改变 HTML 属性</h4><p>如需改变 HTML 元素的属性，请使用这个语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).attribute=<span class="keyword">new</span> value;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"image"</span>).src=<span class="string">"landscape.jpg"</span>;</span><br></pre></td></tr></table></figure><h3 id="DOM-CSS"><a href="#DOM-CSS" class="headerlink" title="DOM CSS"></a>DOM CSS</h3><h4 id="改变-HTML-样式"><a href="#改变-HTML-样式" class="headerlink" title="改变 HTML 样式"></a>改变 HTML 样式</h4><p>如需改变 HTML 元素的样式，请使用这个语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(id).style.property=<span class="keyword">new</span> style;</span><br><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"p2"</span>).style.color=<span class="string">"blue"</span>;</span><br></pre></td></tr></table></figure><p><a href="http://www.w3school.com.cn/jsref/dom_obj_style.asp" target="_blank" rel="noopener">HTML DOM Style 对象参考手册</a></p><h3 id="DOM-事件"><a href="#DOM-事件" class="headerlink" title="DOM 事件"></a>DOM 事件</h3><p><strong>HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。</strong></p><h4 id="对事件做出反应"><a href="#对事件做出反应" class="headerlink" title="对事件做出反应"></a>对事件做出反应</h4><p>我们可以在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时。</p><p>如需在用户点击某个元素时执行代码，请向一个 HTML 事件属性添加 JavaScript 代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">onclick=JavaScript</span><br></pre></td></tr></table></figure><p>HTML 事件的例子：</p><ul><li>当用户点击鼠标时</li><li>当网页已加载时</li><li>当图像已加载时</li><li>当鼠标移动到元素上时</li><li>当输入字段被改变时</li><li>当提交 HTML 表单时</li><li>当用户触发按键时</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.getElementById(<span class="string">"myBtn"</span>).onclick=<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;displayDate()&#125;;</span><br></pre></td></tr></table></figure><h4 id="onload-和-onunload-事件"><a href="#onload-和-onunload-事件" class="headerlink" title="onload 和 onunload 事件"></a>onload 和 onunload 事件</h4><p>onload 和 onunload 事件会在用户进入或离开页面时被触发。</p><p>onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。</p><p>onload 和 onunload 事件可用于处理 cookie。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">"checkCookies()"</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="onchange-事件"><a href="#onchange-事件" class="headerlink" title="onchange 事件"></a>onchange 事件</h4><p>onchange 事件常结合对输入字段的验证来使用。</p><p>下面是一个如何使用 onchange 的例子。当用户改变输入字段的内容时，会调用 function() 函数。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"fname"</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">onchange</span>=<span class="string">"myFunction()&#123;</span></span></span><br><span class="line"><span class="tag"><span class="string">    var x=document.getElementById("</span><span class="attr">fname</span>");</span></span><br><span class="line"><span class="tag"><span class="attr">x.value</span>=<span class="string">x.value.toUpperCase();</span></span></span><br><span class="line"><span class="tag">           &#125;"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>当您离开输入字段时，会触发将输入文本转换为大写的函数。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="onmouseover-和-onmouseout-事件"><a href="#onmouseover-和-onmouseout-事件" class="headerlink" title="onmouseover 和 onmouseout 事件"></a>onmouseover 和 onmouseout 事件</h4><p>onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。</p><h4 id="onmousedown、onmouseup-以及-onclick-事件"><a href="#onmousedown、onmouseup-以及-onclick-事件" class="headerlink" title="onmousedown、onmouseup 以及 onclick 事件"></a>onmousedown、onmouseup 以及 onclick 事件</h4><p>onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。</p><h3 id="DOM-节点"><a href="#DOM-节点" class="headerlink" title="DOM 节点"></a>DOM 节点</h3><p><strong>添加和删除节点（HTML 元素）。</strong></p><h4 id="创建新的-HTML-元素"><a href="#创建新的-HTML-元素" class="headerlink" title="创建新的 HTML 元素"></a>创建新的 HTML 元素</h4><p>如需向 HTML DOM 添加新元素，您必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这是一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这是另一个段落<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> para=<span class="built_in">document</span>.createElement(<span class="string">"p"</span>);<span class="comment">//创建新的 &lt;p&gt; 元素：</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> node=<span class="built_in">document</span>.createTextNode(<span class="string">"这是新段落。"</span>);<span class="comment">//如需向 &lt;p&gt; 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点：</span></span></span><br><span class="line"><span class="javascript">    para.appendChild(node);<span class="comment">//向 &lt;p&gt; 元素追加这个文本节点：</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//向一个已有的元素追加这个新元素。</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> element=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);<span class="comment">//找到一个已有的元素：</span></span></span><br><span class="line"><span class="javascript">    element.appendChild(para);<span class="comment">//向这个已有的元素追加新元素：</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="删除已有的-HTML-元素"><a href="#删除已有的-HTML-元素" class="headerlink" title="删除已有的 HTML 元素"></a>删除已有的 HTML 元素</h4><p>如需删除 HTML 元素，您必须首先获得该元素的父元素：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p1"</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">"p2"</span>&gt;</span>这是另一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> parent=<span class="built_in">document</span>.getElementById(<span class="string">"div1"</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> child=<span class="built_in">document</span>.getElementById(<span class="string">"p1"</span>);</span></span><br><span class="line"><span class="undefined">    parent.removeChild(child);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客主要讲解HTML DOM（文档对象模型）&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/09/javaScriptDOM/liuyifei.jpg&quot; alt=&quot;titu&quot; title=&quot;题图&quot;&gt; &lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://woshilishang123.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://woshilishang123.github.io/tags/JavaScript/"/>
    
      <category term="DOM事件" scheme="https://woshilishang123.github.io/tags/DOM%E4%BA%8B%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript简介</title>
    <link href="https://woshilishang123.github.io/2019/03/09/javaScript%E7%AE%80%E4%BB%8B/"/>
    <id>https://woshilishang123.github.io/2019/03/09/javaScript简介/</id>
    <published>2019-03-09T01:46:27.000Z</published>
    <updated>2019-03-09T02:21:17.160Z</updated>
    
    <content type="html"><![CDATA[<p>JavaScript是世界上最流行的脚本语言！</p><p><img src="/2019/03/09/javaScript简介/刘亦菲.jpg" alt="titu" title="题图"></p><a id="more"></a><p>JavaScript 是一种脚本，一门编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新，交互式的地图，2D/3D 动画，滚动播放的视频等等。</p><h3 id="您将学到什么"><a href="#您将学到什么" class="headerlink" title="您将学到什么"></a>您将学到什么</h3><h4 id="JavaScript：写入-HTML-输出"><a href="#JavaScript：写入-HTML-输出" class="headerlink" title="JavaScript：写入 HTML 输出"></a>JavaScript：写入 HTML 输出</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;h1&gt;This is a heading&lt;/h1&gt;"</span>);</span><br><span class="line"><span class="built_in">document</span>.write(<span class="string">"&lt;p&gt;This is a paragraph&lt;/p&gt;"</span>);</span><br></pre></td></tr></table></figure><p><strong>提示：</strong>您只能在 HTML 输出中使用 document.write。如果您在文档加载后使用该方法，会覆盖整个文档。</p><h4 id="JavaScript：对事件作出反应"><a href="#JavaScript：对事件作出反应" class="headerlink" title="JavaScript：对事件作出反应"></a>JavaScript：对事件作出反应</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">onclick</span>=<span class="string">"alert('Welcome!')"</span>&gt;</span>点击这里<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure><p>alert() 函数在 JavaScript 中并不常用，但它对于代码测试非常方便。</p><p>onclick 事件只是您即将在本教程中学到的众多事件之一。</p><h4 id="JavaScript：改变-HTML-内容"><a href="#JavaScript：改变-HTML-内容" class="headerlink" title="JavaScript：改变 HTML 内容"></a>JavaScript：改变 HTML 内容</h4><p>使用 JavaScript 来处理 HTML 内容是非常强大的功能。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>)  <span class="comment">//查找元素</span></span><br><span class="line">x.innerHTML=<span class="string">"Hello JavaScript"</span>;    <span class="comment">//改变内容</span></span><br></pre></td></tr></table></figure><p>您会经常看到 document.getElementByID(“<em>some id</em>“)。这个方法是 HTML DOM 中定义的。</p><p>DOM（文档对象模型）是用以访问 HTML 元素的正式 W3C 标准。</p><p>您将在本教程的多个章节中学到有关 HTML DOM 的知识。</p><h4 id="JavaScript：改变-HTML-图像"><a href="#JavaScript：改变-HTML-图像" class="headerlink" title="JavaScript：改变 HTML 图像"></a>JavaScript：改变 HTML 图像</h4><p>本例会动态地改变 HTML &lt; image&gt; 的来源 (src)：</p><p>The Light bulb</p><p>点击灯泡就可以打开或关闭这盏灯</p><p><a href="http://www.w3school.com.cn/tiy/t.asp?f=js_lightbulb" target="_blank" rel="noopener">亲自试一试</a></p><p>JavaScript 能够改变任意 HTML 元素的大多数属性，而不仅仅是图片。</p><h4 id="JavaScript：改变-HTML-样式"><a href="#JavaScript：改变-HTML-样式" class="headerlink" title="JavaScript：改变 HTML 样式"></a>JavaScript：改变 HTML 样式</h4><p>改变 HTML 元素的样式，属于改变 HTML 属性的变种。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x=<span class="built_in">document</span>.getElementById(<span class="string">"demo"</span>)  <span class="comment">//找到元素</span></span><br><span class="line">x.style.color=<span class="string">"#ff0000"</span>;           <span class="comment">//改变样式</span></span><br></pre></td></tr></table></figure><h4 id="JavaScript：验证输入"><a href="#JavaScript：验证输入" class="headerlink" title="JavaScript：验证输入"></a>JavaScript：验证输入</h4><p>JavaScript 常用于验证用户的输入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="built_in">isNaN</span>(x) &#123;alert(<span class="string">"Not Numeric"</span>)&#125;;</span><br></pre></td></tr></table></figure><h4 id="您知道吗？"><a href="#您知道吗？" class="headerlink" title="您知道吗？"></a>您知道吗？</h4><p><strong>提示：</strong>JavaScript 与 Java 是两种完全不同的语言，无论在概念还是设计上。</p><p>Java（由 Sun 发明）是更复杂的编程语言。</p><p>ECMA-262 是 JavaScript 标准的官方名称。</p><p>JavaScript 由 Brendan Eich 发明。它于 1995 年出现在 Netscape 中（该浏览器已停止更新），并于 1997 年被 ECMA（一个标准协会）采纳。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JavaScript是世界上最流行的脚本语言！&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/09/javaScript简介/刘亦菲.jpg&quot; alt=&quot;titu&quot; title=&quot;题图&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://woshilishang123.github.io/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="https://woshilishang123.github.io/tags/JavaScript/"/>
    
      <category term="简介" scheme="https://woshilishang123.github.io/tags/%E7%AE%80%E4%BB%8B/"/>
    
  </entry>
  
  <entry>
    <title>css3转换（tranform）</title>
    <link href="https://woshilishang123.github.io/2019/03/08/css3%E8%BD%AC%E6%8D%A2/"/>
    <id>https://woshilishang123.github.io/2019/03/08/css3转换/</id>
    <published>2019-03-08T12:07:04.000Z</published>
    <updated>2019-03-08T12:26:07.365Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客主要讲解CSS3转换，它包括2d转换，3d转换。</p><p><img src="http://img.hb.aicdn.com/1a872749ff476017c874d820e6fe4799f6fb336c98cc8-rOpK3s_fw658" alt="liuyifei" title="刘亦菲"></p><a id="more"></a><h3 id="CSS3-2D转换"><a href="#CSS3-2D转换" class="headerlink" title="CSS3 2D转换"></a>CSS3 2D转换</h3><p>在部分中，您将学到如下 2D 转换方法：</p><ul><li>translate()</li><li>rotate()</li><li>scale()</li><li>skew()</li></ul><h4 id="translate-方法"><a href="#translate-方法" class="headerlink" title="translate() 方法"></a>translate() 方法</h4><p>通过 translate() 方法，元素从其当前位置移动，根据给定的 left（x 坐标） 和 top（y 坐标） 位置参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">transform</span>: <span class="built_in">translate</span>(50px,100px);</span><br><span class="line"><span class="attribute">-ms-transform</span>: <span class="built_in">translate</span>(50px,100px);<span class="comment">/* IE 9 */</span></span><br><span class="line"><span class="attribute">-webkit-transform</span>: <span class="built_in">translate</span>(50px,100px);<span class="comment">/* Safari and Chrome */</span></span><br><span class="line"><span class="attribute">-o-transform</span>: <span class="built_in">translate</span>(50px,100px);<span class="comment">/* Opera */</span></span><br><span class="line"><span class="attribute">-moz-transform</span>: <span class="built_in">translate</span>(50px,100px);<span class="comment">/* Firefox */</span></span><br><span class="line"><span class="comment">/*值 translate(50px,100px) 把元素从左侧移动 50 像素，从顶端移动 100 像素。*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="rotate-方法"><a href="#rotate-方法" class="headerlink" title="rotate() 方法"></a>rotate() 方法</h4><p>通过 rotate() 方法，元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">tranform</span>: <span class="built_in">rotate</span>(30deg);<span class="comment">/*值 rotate(30deg) 把元素顺时针旋转 30 度。*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="scale-方法"><a href="#scale-方法" class="headerlink" title="scale() 方法"></a>scale() 方法</h4><p>通过 scale() 方法，元素的尺寸会增加或减少，根据给定的宽度（X 轴）和高度（Y 轴）参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    transform: scale(2,4);;/*值 scale(2,4) 把宽度转换为原始尺寸的 2 倍，把高度转换为原始高度的 4 倍。*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="skew-方法"><a href="#skew-方法" class="headerlink" title="skew() 方法"></a>skew() 方法</h4><p>通过 skew() 方法，元素翻转给定的角度，根据给定的水平线（X 轴）和垂直线（Y 轴）参数：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">tranform</span>: <span class="built_in">skew</span>(30deg,20deg);<span class="comment">/*值 skew(30deg,20deg) 围绕 X 轴把元素翻转 30 度，围绕 Y 轴翻转 20 度。*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="CSS3-3D转换"><a href="#CSS3-3D转换" class="headerlink" title="CSS3 3D转换"></a>CSS3 3D转换</h3><p>在本章中，您将学到其中的一些 3D 转换方法：</p><ul><li>translate3d()</li><li>rotate3d()</li><li>scale3d()</li><li>skew3d()</li><li>matrix3d()</li></ul><h4 id="rotateX-方法"><a href="#rotateX-方法" class="headerlink" title="rotateX()方法"></a>rotateX()方法</h4><h2 id="rotateX-Y-Z-方法"><a href="#rotateX-Y-Z-方法" class="headerlink" title="rotateX/Y/Z() 方法"></a>rotateX/Y/Z() 方法</h2><p>通过 rotateX() 方法，元素围绕其 X 轴以给定的度数进行旋转。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(120deg);</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateX</span>(120deg);<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateX</span>(120deg);<span class="comment">/* Firefox */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过 rotateY() 方法，元素围绕其 Y 轴以给定的度数进行旋转。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(130deg);</span><br><span class="line">    <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateY</span>(130deg);<span class="comment">/* Safari 和 Chrome */</span></span><br><span class="line">    <span class="attribute">-moz-transform</span>: <span class="built_in">rotateY</span>(130deg);<span class="comment">/* Firefox */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>总方法rotate3d(x,y,z,angle);参数不允许省略</p><p>其他3D属性略</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客主要讲解CSS3转换，它包括2d转换，3d转换。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.hb.aicdn.com/1a872749ff476017c874d820e6fe4799f6fb336c98cc8-rOpK3s_fw658&quot; alt=&quot;liuyifei&quot; title=&quot;刘亦菲&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS3" scheme="https://woshilishang123.github.io/categories/CSS3/"/>
    
    
      <category term="-CSS3 -tranform" scheme="https://woshilishang123.github.io/tags/CSS3-tranform/"/>
    
  </entry>
  
  <entry>
    <title>css3文本和字体</title>
    <link href="https://woshilishang123.github.io/2019/03/08/css3%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E4%BD%93/"/>
    <id>https://woshilishang123.github.io/2019/03/08/css3文本和字体/</id>
    <published>2019-03-08T11:17:05.000Z</published>
    <updated>2019-03-08T12:05:43.437Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客主要介绍CSS3文本效果和字体。</p><p><img src="http://img.hb.aicdn.com/1077a697883ec1c5fbf527823ac80046572042f1109e9-1VBs2f_fw658" alt="liuyifei" title="刘亦菲"></p><a id="more"></a><h3 id="CSS3文本效果"><a href="#CSS3文本效果" class="headerlink" title="CSS3文本效果"></a>CSS3文本效果</h3><p>CSS3包含多个新的文本特性。在本篇博客中主要讲解：text-shadow和word-wrap属性。</p><h4 id="浏览器支持"><a href="#浏览器支持" class="headerlink" title="浏览器支持"></a>浏览器支持</h4><p>Internet Explorer 10、Firefox、Chrome、Safari 以及 Opera 支持 text-shadow 属性。</p><p>所有主流浏览器都支持 word-wrap 属性。</p><p>注释：Internet Explorer 9 以及更早的版本，不支持 text-shadow 属性。</p><h4 id="文本阴影"><a href="#文本阴影" class="headerlink" title="文本阴影"></a>文本阴影</h4><p>text-shadow属性应用于阴影文本</p><p>text-shadow: 水平偏移 竖直偏移 模糊距离 颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line"><span class="attribute">text-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">5px</span> <span class="number">#FF0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p style="text-shadow: 5px 2px 2px #FF0000;">东吴赤乌白醋维稳成本v我IC不遏必u荣誉本人我把蹙额被称为i不错</p><h4 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h4><p>work-break属性：规定非中日韩文本的自动换行规则。</p><p>这个属性对英文的兼容性比较好。</p><p>word-break: normal|break-all|keep-all;<br>normal：使用浏览器默认的换行规则。<br>break-all：允许在单词内换行。<br>keep-all：只能在半角空格或连字符处换行。</p><p>word-wrap属性：允许长单词或 URL 地址换行到下一行。</p><p>word-wrap属性中日韩文本方块字不起效果。</p><p>word-wrap: normal|break-word;<br>normal：只在允许的断字点换行（浏览器保持默认处理）。<br>break-word：在长单词或 URL 地址内部进行换行。</p><h4 id="text-align-last属性"><a href="#text-align-last属性" class="headerlink" title="text-align-last属性"></a>text-align-last属性</h4><p>text-align-last：设置如何对齐最后一行或紧挨着强制换行符之前的行。</p><p>text-align-last：auto| left| right| center| justity（两端对齐)|….</p><p>兼容性不咋地。</p><h4 id="text-overflow-属性"><a href="#text-overflow-属性" class="headerlink" title="text-overflow 属性"></a>text-overflow 属性</h4><p>text-overflow 属性规定当文本溢出包含元素时发生的事情。</p><p>text-overflow: clip|ellipsis|string;<br>clip：修剪文本。<br>ellipsis：显示省略符号来代表被修剪的文本。<br>string：使用给定的字符串来代表被修剪的文本。（此属性兼容性不太好）</p><h3 id="CSS3字体"><a href="#CSS3字体" class="headerlink" title="CSS3字体"></a>CSS3字体</h3><p>本部分主要讲解@font-face的语法规则，取值说明，字体格式和字体的应用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">@<span class="keyword">font-face</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="attribute">font-family</span>: &lt;YourWenFontName&gt;;<span class="comment">/*myfont*/</span></span><br><span class="line"><span class="attribute">src</span>: &lt;source&gt;<span class="comment">/*url('Sansation_Bold.ttf'),</span></span><br><span class="line"><span class="comment">     url('Sansation_Bold.eot'); */</span></span><br><span class="line">font-weight:&lt;weight&gt;;</span><br><span class="line">    <span class="attribute">font-style</span>: &lt;style&gt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> <span class="selector-class">.demo</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>: myfont;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>font-family:name    必需。规定字体的名称。</p><p>src:URL    必需。定义字体文件的 URL。</p><p>font-style:normal,italic(斜体）,oblique（倾斜）    可选。定义字体的样式。默认是 “normal”。<br>font-weight：normal,bold,100,200…900    可选。定义字体的粗细。默认是 “normal”。</p><p><a href="https://www.fontsquirrel.com/tools/webfont-generator" target="_blank" rel="noopener">一个字体网站</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客主要介绍CSS3文本效果和字体。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.hb.aicdn.com/1077a697883ec1c5fbf527823ac80046572042f1109e9-1VBs2f_fw658&quot; alt=&quot;liuyifei&quot; title=&quot;刘亦菲&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS3" scheme="https://woshilishang123.github.io/categories/CSS3/"/>
    
    
      <category term="CSS3" scheme="https://woshilishang123.github.io/tags/CSS3/"/>
    
      <category term="文本" scheme="https://woshilishang123.github.io/tags/%E6%96%87%E6%9C%AC/"/>
    
  </entry>
  
  <entry>
    <title>css背景与渐变</title>
    <link href="https://woshilishang123.github.io/2019/03/05/css%E8%83%8C%E6%99%AF%E4%B8%8E%E6%B8%90%E5%8F%98/"/>
    <id>https://woshilishang123.github.io/2019/03/05/css背景与渐变/</id>
    <published>2019-03-05T08:32:41.000Z</published>
    <updated>2019-03-07T13:01:24.545Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客主要介绍CSS3的背景和渐变新增的部分内容</p><p><img src="http://img.hb.aicdn.com/eabb88049007b86e6a15c884f94ddd9ae4494ddb6d451-uTdWm7_fw658 &quot;刘亦菲" alt="liuyifei"></p><a id="more"></a><h3 id="BackGround属性"><a href="#BackGround属性" class="headerlink" title="BackGround属性"></a>BackGround属性</h3><h4 id="background-clip属性"><a href="#background-clip属性" class="headerlink" title="background-clip属性"></a>background-clip属性</h4><p>background-clip属性指定背景绘制区域</p><p>语法：background-clip: border-box | padding-box | content-box;</p><p>背景绘制区域分别是border/padding/content以内区域</p><h4 id="background-origin属性"><a href="#background-origin属性" class="headerlink" title="background-origin属性"></a>background-origin属性</h4><p>background-origin属性指定background-position属性因该是相对位置</p><p>background-origin设置元素背景图片的起始位置</p><p>定义背景图片位置，两个值：水平和垂直偏移量</p><p>语法：background-origin: border-box | padding-box | content-box;</p><h4 id="background-size属性"><a href="#background-size属性" class="headerlink" title="background-size属性"></a>background-size属性</h4><p>background-size属性指定背景图片大小</p><p>语法：background-size: length| percentage| cover| contain;</p><h4 id="background属性整合"><a href="#background属性整合" class="headerlink" title="background属性整合"></a>background属性整合</h4><p>background: color position size repead origin clip attachment image;</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#123456</span> center <span class="number">50%</span> no-repeat content-box content-box fixed <span class="built_in">url</span>(<span class="string">"123.png"</span>);</span><br><span class="line">&#125;<span class="comment">/*不建议这样写*/</span></span><br></pre></td></tr></table></figure><h3 id="CSS3渐变"><a href="#CSS3渐变" class="headerlink" title="CSS3渐变"></a>CSS3渐变</h3><p>渐变可以在两个或多个指定的颜色之间显示平稳的过渡。</p><h4 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h4><p>沿着一根轴线改变颜色，从起点到终点进行循序渐变（从一边拉向另一边）。</p><p>语法：background: linear-gradient(direction.,color-stop1, color-stop2, …);</p><p>background: linear-gradient(angle, color-stop1, color-stop2, …);</p><p>可以设置多个渐变色</p><p>direction: to rigiht, to left, to top, to bottom, to right bottom(左上到右下)</p><p>angle: 0deg(从上到下), 45deg, 90deg(从左到右), 233deg, 180(从下到上)， 270（从右到左)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to top left, red, yellow, blue);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">800px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(45deg, green, purple, blue);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(90deg,red 10%, green 50%, purple 75%, blue 100%);<span class="comment">/*red：0%~10%*/</span></span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(90deg,red 0%, green 50%, purple 65%, blue 85%);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(90deg,rgba(255, 0, 0, 0) , <span class="built_in">rgba</span>(255,0,0,1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div style="width: 800px; height: 100px; background: linear-gradient(to top left, red, yellow, blue);"></div><p><br></p><div style="width: 800px; height: 100px; background: linear-gradient(45deg, green, purple, blue);"></div><p><br></p><div style="width: 800px; height: 100px; background: linear-gradient(90deg,red 10%, green 50%, purple 75%, blue 100%);"></div><p><br></p><div style="width: 800px; height: 100px; background: linear-gradient(90deg,red 0%, green 50%, purple 65%, blue 85%);"></div><p><br></p><p>第一个颜色默认0%，最后一个颜色默认100%。</p><div style="width: 800px; height: 100px; background: linear-gradient(90deg, rgba(255, 0, 0, 0) , rgba(255,0,0,1));"></div><h5 id="重复渐变"><a href="#重复渐变" class="headerlink" title="重复渐变"></a>重复渐变</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">demo</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">repeating-linear-gradient</span>(90deg,red 0%, blue 10%, red 20%);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div style="width: 800px; height: 100px; background: repeating-linear-gradient(90deg,red 0%, blue 10%, red 20%);"></div><h4 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h4><p>径向渐变(radial-gradients)属性：从起点到终点颜色从内到外进行圆形渐变（从中间往外拉）</p><p>语法：background: radial-gradient(center shape size, start-color, …, last-color);</p><p>shape:ellipse(默认), circle</p><div style="width: 200px;            height: 200px;            background: -webkit-radial-gradient(circle, red, blue);            background: radial-gradient(circle, red,yellow, green, blue);"></div><br><br><br><div style="width: 200px;            height: 200px;            background: -webkit-radial-gradient(ellipse, red, yellow, green, blue);            background: radial-gradient(ellipse, red,yellow, green, blue);"></div><p>size: closest-side(最近边),farthest-side(最远边),closest-corner(最近角),farthest-cornet(最远角)</p><div style="width: 200px;            height: 200px;            background: -webkit-radial-gradient(closest-side, red, blue);            background: radial-gradient(closest-side, red,yellow, green, blue);"></div><p><br></p><div style="width: 200px;            height: 200px;            background: -webkit-radial-gradient(closest-corner, red, blue);            background: radial-gradient(closest-corner, red,yellow, green, blue);"></div><p><br></p><div style="width: 200px;            height: 200px;            background: -webkit-radial-gradient(farthest-side, red, blue);            background: radial-gradient(farthest-side, red,yellow, green, blue);"></div><p><br></p><div style="width: 200px;            height: 200px;            background: -webkit-radial-gradient(30% 70%, farthest-corner, red, blue);            background: radial-gradient(30% 70%, farthest-corner, red, blue);"></div><h5 id="重复渐变-1"><a href="#重复渐变-1" class="headerlink" title="重复渐变"></a>重复渐变</h5><div style="width: 200px;            height: 200px;            background: -webkit-repeating-radial-gradient(red 0%, blue 15% ,red 30);            background: repeating-radial-gradient(red 0%, blue 15% ,red 30);">chrome不支持</div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客主要介绍CSS3的背景和渐变新增的部分内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img.hb.aicdn.com/eabb88049007b86e6a15c884f94ddd9ae4494ddb6d451-uTdWm7_fw658 &amp;quot;刘亦菲&quot; alt=&quot;liuyifei&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS3" scheme="https://woshilishang123.github.io/categories/CSS3/"/>
    
    
      <category term="CSS3" scheme="https://woshilishang123.github.io/tags/CSS3/"/>
    
      <category term="背景" scheme="https://woshilishang123.github.io/tags/%E8%83%8C%E6%99%AF/"/>
    
  </entry>
  
  <entry>
    <title>CSS3边框与圆角</title>
    <link href="https://woshilishang123.github.io/2019/03/05/css%E8%BE%B9%E6%A1%86%E4%B8%8E%E5%9C%86%E8%A7%92/"/>
    <id>https://woshilishang123.github.io/2019/03/05/css边框与圆角/</id>
    <published>2019-03-05T07:42:23.000Z</published>
    <updated>2019-03-05T08:30:04.722Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客主要讲解CSS3的圆角，盒阴影和边界图片。</p><p><img src="/2019/03/05/css边框与圆角/刘亦菲.jpg" alt="liuyifei" title="liuyifei"></p><a id="more"></a><h3 id="CSS3圆角"><a href="#CSS3圆角" class="headerlink" title="CSS3圆角"></a>CSS3圆角</h3><h4 id="border-radius属性"><a href="#border-radius属性" class="headerlink" title="border-radius属性"></a>border-radius属性</h4><p>此部分内容在博客<a href="https://woshilishang123.github.io/2019/02/26/css%E6%95%88%E6%9E%9C/" style="text-decoration: none">css效果</a>里面已经介绍过了。</p><p>四个值 ：左上角  右上角 右下角 左下角 </p><p>三个值：左上角  右上角和左下角  右下角 </p><p>考虑兼容性问题，可以加上前缀。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">    <span class="attribute">-webkit-broder-radius</span>: <span class="number">50%</span>;<span class="comment">/*chrome*/</span></span><br><span class="line">       <span class="attribute">-moz-broder-radius</span>: <span class="number">50%</span>;<span class="comment">/*firefox*/</span></span><br><span class="line">    <span class="attribute">-ms-broder-radius</span>: <span class="number">50%</span>;<span class="comment">/*IE*/</span></span><br><span class="line">    <span class="attribute">-o-broder-radius</span>: <span class="number">50%</span>;<span class="comment">/*opera*/</span></span><br><span class="line">    <span class="attribute">broder-radius</span>: <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="盒阴影-box-shadow"><a href="#盒阴影-box-shadow" class="headerlink" title="盒阴影 box-shadow"></a>盒阴影 box-shadow</h4><p>此部分内容在博客<a href="https://woshilishang123.github.io/2019/02/26/css%E6%95%88%E6%9E%9C/" style="text-decoration: none">css效果</a>里面已经介绍过了。</p><h4 id="边界图片-border-image"><a href="#边界图片-border-image" class="headerlink" title="边界图片 border-image"></a>边界图片 border-image</h4><p>使用border-image-*属性来构建美丽的可扩展按钮。</p><p>语法：border-image: source slice width outset repeat;</p><p> border-image-source: 指定要使用的图像 ;<br> border-image-slice: 指定图像的边界向内偏移多少;<br> border-image-width: 指定图像边界的宽度;<br> border-image-outset: 指定在边框的外部绘制border-image-area的量;<br> border-image-repeat:  边界是否应重复repeated，拉伸stretched，或铺满rounded; </p><p>slice和width是相关联的。个人觉得使用%较好。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">border-image-source</span>: <span class="built_in">url</span>(<span class="string">"boder.jpg"</span>);</span><br><span class="line">    <span class="attribute">border-image-slice</span>: number/%/fill;<span class="comment">/*10%*/</span></span><br><span class="line">    <span class="attribute">border-image-width</span>: number/%/auto;<span class="comment">/*auto：自动/自适应*/</span></span><br><span class="line">    <span class="attribute">border-image-outset</span>: length/number;</span><br><span class="line">    <span class="attribute">border-image-repeat</span>: stretch/repeat/round/initial/inherit;<span class="comment">/*默认：stretch；inittial：读取默认值；inherit：继承父元素*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客主要讲解CSS3的圆角，盒阴影和边界图片。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/05/css边框与圆角/刘亦菲.jpg&quot; alt=&quot;liuyifei&quot; title=&quot;liuyifei&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS3" scheme="https://woshilishang123.github.io/categories/CSS3/"/>
    
    
      <category term="CSS3" scheme="https://woshilishang123.github.io/tags/CSS3/"/>
    
      <category term="圆角" scheme="https://woshilishang123.github.io/tags/%E5%9C%86%E8%A7%92/"/>
    
  </entry>
  
  <entry>
    <title>css3选择器</title>
    <link href="https://woshilishang123.github.io/2019/03/04/css3%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://woshilishang123.github.io/2019/03/04/css3选择器/</id>
    <published>2019-03-04T12:04:26.000Z</published>
    <updated>2019-03-05T07:36:33.940Z</updated>
    
    <content type="html"><![CDATA[<p>本博客主要介绍CSS3新增选择器</p><p><img src="/2019/03/04/css3选择器/liuyifei.jpg" alt="liuyifei" title="刘亦菲"></p><a id="more"></a><h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>CSS3发布之前，CSS基本选择器有：通配符选择器（*），元素选择器（div），ID选择器（#id），类选择器（#），后台选择器（空格)。</p><p>CSS3新增的基本选择器有子元素选择器，相邻兄弟元素选择器，通用兄弟选择器和群组选择器。</p><h4 id="子元素选择器"><a href="#子元素选择器" class="headerlink" title="子元素选择器"></a>子元素选择器</h4><p>子元素选择器只能选择某元素的子元素</p><p>语法：父元素 &gt; 子元素</p><h4 id="相邻兄弟元素选择器"><a href="#相邻兄弟元素选择器" class="headerlink" title="相邻兄弟元素选择器"></a>相邻兄弟元素选择器</h4><p>相邻兄弟元素选择器可以选择紧接在另一个元素后的元素，而且他们具有一个相同的父元素。</p><p>语法：元素 + 兄弟相邻元素（第一个）{}</p><h4 id="通用兄弟元素选择器"><a href="#通用兄弟元素选择器" class="headerlink" title="通用兄弟元素选择器"></a>通用兄弟元素选择器</h4><p>通用兄弟元素选择器可以选择某元素后的所有兄弟元素，而且他们具有一个相同的父元素。</p><p>语法：元素 ~  后面所有兄弟相邻元素{}</p><h4 id="群组选择器"><a href="#群组选择器" class="headerlink" title="群组选择器"></a>群组选择器</h4><p>群组选择器是将具有相同样式的元素分组在一起，每个选择器之间使用逗号“，”隔开</p><p>语法：元素1，元素2，元素3{CSS语句}</p><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p><strong>对带有<mark>指定属性</mark>的HTML元素设置样式</strong></p><p>使用CSS3属性选择器，你可以只指定元素的某个属性，或者你还可以同时指定元素的某个属性和其对应的属性值。</p><h4 id="ELement-attribute"><a href="#ELement-attribute" class="headerlink" title="ELement[attribute]"></a>ELement[attribute]</h4><p>为带有<mark>attribute</mark>属性的Element元素设置样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href]</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;<span class="comment">/*所有的a并且有href属性的标签*/</span></span><br></pre></td></tr></table></figure><h4 id="ELement-attribute-”value”"><a href="#ELement-attribute-”value”" class="headerlink" title="ELement[attribute=”value”]"></a>ELement[attribute=”value”]</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-attr">[href="www.123.com"]</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;<span class="comment">/*所有的a并且有href===www.123.com属性的标签*/</span></span><br></pre></td></tr></table></figure><h4 id="ELement-attribute-”value”-1"><a href="#ELement-attribute-”value”-1" class="headerlink" title="ELement[attribute~=”value”]"></a>ELement[attribute~=”value”]</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class~="two"]</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;<span class="comment">/*&lt;p class="two three"/class="one two"&gt;属性的标签;匹配含有class===two*/</span></span><br></pre></td></tr></table></figure><h4 id="ELement-attribute-”value”-2"><a href="#ELement-attribute-”value”-2" class="headerlink" title="ELement[attribute*=”value”]"></a>ELement[attribute*=”value”]</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class*="tw"]</span>&#123;</span><br><span class="line">    <span class="attribute">text-decoration</span>: none;</span><br><span class="line">&#125;<span class="comment">/*匹配包含vaue或以value-开头的元素class*/</span></span><br></pre></td></tr></table></figure><h3 id="伪类选择器"><a href="#伪类选择器" class="headerlink" title="伪类选择器"></a>伪类选择器</h3><p>伪元素选择器包括：动态伪类(锚点伪类、用户行为伪类)</p><p>UI元素状态选择器</p><p>CSS3结构类</p><p>否定选择器</p><p>伪元素选择器</p><h4 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h4><p>这些动态伪类并不存在于HTML中，只有当用户与网站<mark>交互</mark>的时候才能体现出来</p><p><strong>锚点伪类</strong></p><p>:link (蓝色链接), :visited(访问过的链接)</p><p><strong>用户行为伪类</strong></p><p>:hover(鼠标经过), :active(点击时), :focus(获取鼠标)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#000000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#00ffff</span>;</span><br><span class="line">&#125;<span class="comment">/*也可以用于其他元素*/</span></span><br></pre></td></tr></table></figure><h4 id="UI元素状态伪类"><a href="#UI元素状态伪类" class="headerlink" title="UI元素状态伪类"></a>UI元素状态伪类</h4><p>我们把“:enabled”(可输入的), “:disabled”(不可输入的), “:checked”(选中的)伪类成为UI元素状态伪类</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:enabled</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#123456</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:disabled</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#123456</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:checked</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#123456</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">disabled</span>=<span class="string">"disabled"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">enable</span>=<span class="string">"enable"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"check"</span> <span class="attr">checked</span>=<span class="string">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="CSS3结构类"><a href="#CSS3结构类" class="headerlink" title="CSS3结构类"></a>CSS3结构类</h4><p><strong>CSS3的：nth选择器</strong></p><p>我们把CSS3的：nth选择器也称为CSS3结构类</p><p><strong>选择方法</strong></p><p>:first-child, :last-child, :nth-child(), :nth-last-child(), :nth-of-type(), </p><p>:nth-last-of-type(), :first-of-type, :last-of-type, :only-child, :only-of type, :empty</p><h5 id="first-child-last-child-nth-child-nth-last-child"><a href="#first-child-last-child-nth-child-nth-last-child" class="headerlink" title=":first-child, :last-child, :nth-child(),:nth-last-child()"></a>:first-child, :last-child, :nth-child(),:nth-last-child()</h5><p><strong>这四个伪类针对子元素，比如div:nth-child()针对div的子元素</strong></p><p>div:first-child：选择属于其父元素的<mark>首个子元素</mark>是div的div元素，并为其设置样式</p><p>:last-child：选择属于父元素的<mark>最后一个子元素</mark>的Element元素，并为其设置样式</p><p>:nth-child(N)：匹配属于其父元素的<mark>第N个子元素</mark>，不论元素的类型。</p><p> :nth-last-child(N)：匹配属于父元素的倒数第N个子元素的每个元素，不论元素的类型，从最后一个元素开始计数。</p><p>扩展：</p><p>第一个元素的下标是1。</p><p>:nth-child(n)：n是一个简单的表达式，取值从“0”开始计算。这里只能是“n”，不能用其他字母替换。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.demo</span><span class="selector-pseudo">:nth-child(2)</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#123456</span>;</span><br><span class="line">&#125;<span class="comment">/*匹配第二个元素*/</span></span><br><span class="line"><span class="selector-class">.demo</span><span class="selector-pseudo">:nth-child(n)</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#123456</span>;</span><br><span class="line">&#125;<span class="comment">/*匹配所有元素*/</span></span><br><span class="line">.demo:nth-child(odd/2n+1)&#123;</span><br><span class="line">    <span class="selector-tag">color</span>:<span class="selector-id">#123456</span>;</span><br><span class="line">&#125;<span class="comment">/*匹配奇数元素*/</span></span><br><span class="line">.demo:nth-child(even/2n)&#123;</span><br><span class="line">    <span class="selector-tag">color</span>:<span class="selector-id">#123456</span>;</span><br><span class="line">&#125;<span class="comment">/*匹配偶数元素*/</span></span><br><span class="line"><span class="selector-class">.demo</span><span class="selector-pseudo">:nth-child(3n+1)</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#123456</span>;</span><br><span class="line">&#125;<span class="comment">/*3n+1*/</span></span><br><span class="line"><span class="selector-class">.demo</span><span class="selector-pseudo">:nth-child(n</span>*<span class="selector-tag">n</span>)&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#123456</span>;</span><br><span class="line">&#125;<span class="comment">/*错误*/</span></span><br></pre></td></tr></table></figure><h5 id="nth-of-type-nth-last-of-type-first-of-type-last-of-type-one-child-only-of-type"><a href="#nth-of-type-nth-last-of-type-first-of-type-last-of-type-one-child-only-of-type" class="headerlink" title=":nth-of-type(), :nth-last-of-type(), :first-of-type, :last-of-type,:one-child, :only-of type"></a>:nth-of-type(), :nth-last-of-type(), :first-of-type, :last-of-type,:one-child, :only-of type</h5><p><strong>这几个伪类针对同名元素，比如div:nth-of-type(N)针对div元素</strong></p><p>div:nth-of-type(N)：匹配属于父元素的<mark>特定类型</mark>（div）第N个子元素（div）的每个元素。所有的属于其父元素（所有元素）第N个div。</p><p> :nth-last-of-type(), :first-of-type, :last-of-type：略</p><p>div:one-child：针对没有兄弟元素的div元素，比如div:only-of type只有一个div但有两个兄弟元素为p，不会被选中</p><p>:only-of type：选择器匹配属于其父元素的特定类型的唯一子元素的每个元素，比如div:only-of type只有一个div但有两个兄弟元素为p，仍会被选中</p><h5 id="empty"><a href="#empty" class="headerlink" title=":empty"></a>:empty</h5><p>:empty选择器匹配没有子元素（包括文本节点）的每个元素</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--目标元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>124<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="否定选择器（-not）"><a href="#否定选择器（-not）" class="headerlink" title="否定选择器（:not）"></a>否定选择器（:not）</h4><p>:not(ELement/selector)选择器匹配非指定元素/选择器的每个元素。</p><p>语法：父元素:not(子元素/子选择器) ；father:not(chidren/selector)</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:not(p)</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">&#125;<span class="comment">/*不选择p*/</span></span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:not(last-of-type)</span>&#123;</span><br><span class="line">    <span class="attribute">border-right</span>:<span class="number">1px</span> solid red;</span><br><span class="line">&#125;<span class="comment">/*不选择最后一个a*/</span></span><br></pre></td></tr></table></figure><h4 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h4><p>伪元素用于像某些选择器设置特殊效果。</p><p>语法：元素<mark>::</mark>伪元素 / 元素<mark>:</mark>伪元素</p><h5 id="CSS权重"><a href="#CSS权重" class="headerlink" title="CSS权重"></a>CSS权重</h5><p>什么是权重：当很多的规则被应用到某一个元素上时，权重是一个决定哪种规则生效，或者是优先级的过程。</p><p>权重等级与权重：行内样式（1000）&gt;id选择器（100）&gt;类，属性选择器和伪类选择器(10)&gt;元素和伪元素(1)&gt;*(0)</p><p>行内样式：&lt; div style=” “ &gt; &lt; /div &gt;,style里面的样式就是行内样式</p><p>权重相同的连个css样式，后面的会覆盖前面的样式</p><h5 id="first-line"><a href="#first-line" class="headerlink" title="first-line"></a>first-line</h5><p>根据“first-line”伪元素中的样式对元素的<mark>第一行文本</mark>进行格式化/执行css样式。first-line伪元素只能用于块级元素。</p><h5 id="first-letter"><a href="#first-letter" class="headerlink" title="first-letter"></a>first-letter</h5><p>用于向文本的<mark>首字母</mark>设置样式。</p><p>first-letter只能用于块级元素</p><h5 id="before"><a href="#before" class="headerlink" title="before"></a>before</h5><p>在元素的<strong>内容</strong><mark>前面</mark>插入新内容</p><p>常用”content”配合使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::before</span>&#123;</span><br><span class="line">    <span class="attribute">content</span>:<span class="string">"我在内容的前面"</span>;</span><br><span class="line">    <span class="attribute">color</span>:red;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">border-right</span>:<span class="number">1px</span> solid green;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>特点：父元素（例如demo里的div)的第一个子元素; 是个行级元素； 内容通过content写入，支持所有的css样式；标签里面找不到</p><h5 id="after"><a href="#after" class="headerlink" title="after"></a>after</h5><p>在元素的<strong>内容</strong><mark>后面</mark>插入新内容</p><p>多用于清除浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">    display= block;</span><br><span class="line">    <span class="selector-tag">content</span>: "";</span><br><span class="line">    <span class="selector-tag">clear</span>: <span class="selector-tag">both</span>;<span class="comment">/*清除浮动*/</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">aisde</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">article</span>&#123;</span><br><span class="line">    <span class="attribute">float</span>:right;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aside</span>&gt;</span>12<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">article</span>&gt;</span>123<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="selsection"><a href="#selsection" class="headerlink" title="selsection"></a>selsection</h5><p>用于设置浏览器中<strong>选中</strong>文本后的背景色和前景色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">color</span>: black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">::selection</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本博客主要介绍CSS3新增选择器&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/04/css3选择器/liuyifei.jpg&quot; alt=&quot;liuyifei&quot; title=&quot;刘亦菲&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="CSS3" scheme="https://woshilishang123.github.io/categories/CSS3/"/>
    
    
      <category term="前端" scheme="https://woshilishang123.github.io/tags/%E5%89%8D%E7%AB%AF/"/>
    
      <category term="CSS3" scheme="https://woshilishang123.github.io/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>html5表单和input</title>
    <link href="https://woshilishang123.github.io/2019/03/04/html5%E8%A1%A8%E5%8D%95%E5%92%8Cinput/"/>
    <id>https://woshilishang123.github.io/2019/03/04/html5表单和input/</id>
    <published>2019-03-04T08:28:10.000Z</published>
    <updated>2019-03-04T11:51:35.138Z</updated>
    
    <content type="html"><![CDATA[<p>本篇博客主要介绍HTML5的属性变化和表单验证。</p><p><img src="/2019/03/04/html5表单和input/liuyifei.jpg" alt="liuyifei" title="liuyifei"></p><a id="more"></a><h3 id="HTML5属性变化"><a href="#HTML5属性变化" class="headerlink" title="HTML5属性变化"></a>HTML5属性变化</h3><h4 id="input新增属性"><a href="#input新增属性" class="headerlink" title="input新增属性"></a>input新增属性</h4><h5 id="电子邮件"><a href="#电子邮件" class="headerlink" title="电子邮件"></a>电子邮件</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><center><input type="email" name="email" value="demo@tuzi.com"></center><h5 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input type=&quot;url&quot; name=&quot;url&quot;&gt;&lt;/input&gt;</span><br></pre></td></tr></table></figure><center><input type="url" name="url" value="www.tuzi.com"></center><h5 id="电话号码"><a href="#电话号码" class="headerlink" title="电话号码"></a>电话号码</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"tel"</span> <span class="attr">name</span>=<span class="string">"tel"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><center><input type="tel" name="tel" value="13888888888"></center><h5 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">name</span>=<span class="string">"number"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br></pre></td></tr></table></figure><center><input type="number" name="number" value="1234567890"></center><h5 id="Date-Pickers"><a href="#Date-Pickers" class="headerlink" title="Date Pickers"></a>Date Pickers</h5><p>此input类型包括Date,Month,Week,Time, DateTime(选取时间，日，月，年-使用UTC时间),Date-local(本地时间)</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    Date:</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"date"</span> <span class="attr">name</span>=<span class="string">"date"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div><br>    Date:<br>    <input type="date" name="date"><br></div><h5 id="Range-Search-Color"><a href="#Range-Search-Color" class="headerlink" title="Range Search Color"></a>Range Search Color</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span> <span class="attr">name</span>=<span class="string">"range"</span> <span class="attr">min</span>=<span class="string">"1"</span> <span class="attr">max</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span> <span class="attr">name</span>=<span class="string">"search"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"color"</span> <span class="attr">name</span>=<span class="string">"color"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><div><br>    <input type="range" name="range" min="1" max="10" value="7"><br>    <input type="search" name="search" value="search"><br>    <input type="color" name="color" value="#aaffdd"><br></div><h4 id="表单属性"><a href="#表单属性" class="headerlink" title="表单属性"></a>表单属性</h4><h5 id="autocomplete属性"><a href="#autocomplete属性" class="headerlink" title="autocomplete属性"></a>autocomplete属性</h5><p>自动完成(autocomplete)属性,再次打开网页，网页会记住上次提交的内容。</p><p>form或input域应该拥有自动完成功能</p><p>&lt; form autocomplete=”on/off”&gt;&lt; /form&gt;</p><p>PS:autocomplete适用于&lt; form &gt;标签，以及以下类型的&lt; input &gt;标签：text, search, url, telephone, email, password,  datepickers, range, color。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com"</span> <span class="attr">autocomplete</span>=<span class="string">"on"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">autocomplete</span>=<span class="string">"off"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form action="https://ww.baidu.com" autocomplete="on"><br>    <input type="text" name="text"><br>    <input type="text" name="text" autocomplete="off"><br>    <input type="submit"><br></form><h5 id="autofocus属性"><a href="#autofocus属性" class="headerlink" title="autofocus属性"></a>autofocus属性</h5><p>规定在页面加载时，域自动地获得焦点。</p><p>autofocus属性使用与所有的&lt; input&gt;标签的类型。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">autofocus</span>=<span class="string">"autofocus"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span>/*用法:autofocus=”autofocus“*/</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form action="https://ww.baidu.com"><br>    <input type="text" name="text"><br>    <input type="text" name="text" autofocus="autofocus"><br>    <input type="submit"><br></form><h5 id="multiple-ˈməltəpəl"><a href="#multiple-ˈməltəpəl" class="headerlink" title="multiple(ˈməltəpəl)"></a>multiple(ˈməltəpəl)</h5><p>规定输入域中可选择<mark>多</mark>个值</p><p>PS：multiple属性适用于以下类型的&lt; input&gt;标签：email and file</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span></span><br><span class="line">    请选择文件</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span> <span class="attr">value</span>=<span class="string">"123@qq.com,234@qq.com"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span>/*形成数组发到后台,若无multiple则形成一个字符串发送到后台*/</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"file"</span> <span class="attr">multiple</span>=<span class="string">"multiple"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">/*用法:multiple="multiple"*/</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form action="https://ww.baidu.com"><br>    只能选择一个文件<br>    <input type="file" name="file"><br>    <input type="email" name="email" multiple="multiple" value="123@qq.com,234@qq.com"><br>    只能选择<mark>多个</mark>文件<br>    <input type="file" name="file" multiple="multiple"><br>    <input type="submit"><br></form><h5 id="placeholder属性"><a href="#placeholder属性" class="headerlink" title="placeholder属性"></a>placeholder属性</h5><p>提供一种提示（hint），描述输入域期待的值</p><p>适用于&lt; input&gt;标签type属性值为：text, search, telephone, email, password。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://ww.baidu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">autofocus</span>=<span class="string">"autofocus"</span> <span class="attr">placeholder</span>=<span class="string">"请输入你的银行卡密码"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form action="https://ww.baidu.com"><br>    <input type="text" name="text"><br>    <input type="text" name="text" autofocus="autofocus" placeholder="请输入你的银行卡密码"><br>    <input type="submit"><br></form><h5 id="required属性"><a href="#required属性" class="headerlink" title="required属性"></a>required属性</h5><p>规定必须再提交之前填写输入域（不能为空）</p><p>减少前端开发人员写表单验证的压力。</p><p>required适用于&lt; form &gt;标签，以及以下类型的&lt; input &gt;标签：text, search, url, telephone, email, password,  date pickers, number, checkbox,radio,file。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"https://www.baidu.com"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"text"</span> <span class="attr">required</span>=<span class="string">"required"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"email"</span> <span class="attr">name</span>=<span class="string">"email"</span> <span class="attr">required</span>=<span class="string">"required"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span><span class="tag">&lt;/<span class="name">input</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><form action="https://www.baidu.com"><br>    <input type="text" name="text" required="required"><br>    <input type="email" name="email" required="required"><br>    <input type="submit"><br></form><h5 id="链接属性"><a href="#链接属性" class="headerlink" title="链接属性"></a>链接属性</h5><h6 id="sizes"><a href="#sizes" class="headerlink" title="sizes"></a>sizes</h6><p>sizes用在&lt; link&gt;里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"icon"</span> <span class="attr">href</span>=<span class="string">"icon.gif"</span> <span class="attr">type</span>=<span class="string">"image/gif"</span> <span class="attr">sizes</span>=<span class="string">"16X16"</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="target"><a href="#target" class="headerlink" title="target"></a>target</h6><p>target用在base里面</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">base</span> <span class="attr">href</span>=<span class="string">"http://localhost/"</span> <span class="attr">target</span>=<span class="string">"_blank"</span>&gt;</span>/*控制整个网页的超链接<span class="tag">&lt; <span class="attr">a</span> &gt;</span>*/</span><br></pre></td></tr></table></figure><h6 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h6><p>a:media=””(表示对设备进行优化，handheld对“手持”设备进行支持，tv对“电视”设备进行支持)；</p><p>a:hreflang= “zh-CN”（设置语言）</p><p>a:rel=“external”（设置超链接的引用，这里超链接为外部链接）。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本篇博客主要介绍HTML5的属性变化和表单验证。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/2019/03/04/html5表单和input/liuyifei.jpg&quot; alt=&quot;liuyifei&quot; title=&quot;liuyifei&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="HTML5" scheme="https://woshilishang123.github.io/categories/HTML5/"/>
    
    
      <category term="HTML5" scheme="https://woshilishang123.github.io/tags/HTML5/"/>
    
      <category term="表单" scheme="https://woshilishang123.github.io/tags/%E8%A1%A8%E5%8D%95/"/>
    
  </entry>
  
</feed>
