<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[BootStrap（二）组件]]></title>
    <url>%2F2019%2F03%2F27%2FBootStrap2%2F</url>
    <content type="text"><![CDATA[bootstrap无数可复用的组件，包括字体图标、下拉菜单、导航、警告框、弹出框等更多功能]]></content>
      <categories>
        <category>BootStrap</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BootStrap（一）-全局CSS样式（前半部分）]]></title>
    <url>%2F2019%2F03%2F27%2FBootStrap1%2F</url>
    <content type="text"><![CDATA[Bootstrap 是最受欢迎的 HTML、CSS 和 JS 框架，用于开发响应式布局、移动设备优先的 WEB 项目。 概览移动设备优先bootstrap是移动设备优先的 为了确保适当的绘制和触屏缩放，需要在 &lt;head&gt; 之中添加 viewport 元数据标签。 1&lt;meta name="viewport" content="width=device-width, initial-scale=1"&gt; 在移动设备浏览器上，通过为视口（viewport）设置 meta 属性为 user-scalable=no 可以禁用其缩放（zooming）功能。这样禁用缩放功能后，用户只能滚动屏幕，就能让你的网站看上去更像原生应用的感觉。注意，这种方式并不推荐所有网站使用，还是要看情况而定！ 1&lt;meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no"&gt; 布局容器Bootstrap 需要为页面内容和栅格系统包裹一个 .container 容器。我们提供了两个作此用处的类。注意，由于 padding 等属性的原因，这两种容器类不能互相嵌套。 .container 类用于固定宽度并支持响应式布局的容器。 123&lt;div class="container"&gt; ...&lt;/div&gt; .container-fluid 类用于 100% 宽度，占据全部视口（viewport）的容器。 123&lt;div class="container-fluid"&gt; ...&lt;/div&gt; 栅格系统Bootstrap 提供了一套响应式、移动设备优先的流式栅格系统，随着屏幕或视口（viewport）尺寸的增加，系统会自动分为最多12列。 简介栅格系统用于通过一系列的行（row）与列（column）的组合来创建页面布局，你的内容就可以放入这些创建好的布局中。 “行（row）”必须包含在 .container （固定宽度）或 .container-fluid （100% 宽度）中，以便为其赋予合适的排列（aligment）和内补（padding）。 内容放置于“列（column）”内；只有“列（column）”可以作为行（row）”的直接子元素。 类似 .row 和 .col-xs-4 这种预定义的类，可以用来快速创建栅格布局。Bootstrap 源码中定义的 mixin 也可以用来创建语义化的布局。 通过为“列（column）”设置 padding 属性，从而创建列与列之间的间隔（gutter）。通过为 .row 元素设置负值 margin 从而抵消掉为 .container 元素设置的 padding，也就间接为“行（row）”所包含的“列（column）”抵消掉了padding。 负值的 margin就是下面的示例为什么是向外突出的原因。在栅格列中的内容排成一行。 栅格系统中的列是通过指定1到12的值来表示其跨越的范围。 如果一“行（row）”中包含了的“列（column）”大于 12，多余的“列（column）”所在的元素将被作为一个整体另起一行排列。 demo： 1234567891011121314&lt;!-- 固定宽度的栅格布局 --&gt;&lt;div class="container"&gt; &lt;div class="row"&gt; &lt;div class="col-xs-6 col-sm-6 col-md-4 col-lg-4"&gt;.col-xs-6 .col-sm-6 .col-md-4 .col-lg-4&lt;/div&gt; &lt;div class="col-xs-6 col-sm-6 col-md-4 col-lg-4"&gt;.col-xs-6 .col-sm-6 .col-md-4 .col-lg-4&lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;!-- 100%宽度的栅格布局 --&gt;&lt;div class="container-fluid"&gt; &lt;div class="row"&gt; ... &lt;/div&gt;&lt;/div&gt; 我也不太清除两者的区别，等我写个demo试试。 响应式列重置在某些阈值时，某些列可能会出现比别的列高的情况。为了克服这一问题，建议联合使用 .clearfix 和 响应式工具类。 123456789&lt;div class="row"&gt; &lt;div class="col-xs-6 col-sm-3"&gt;.col-xs-6 .col-sm-3Resize your viewport or check it out on your phone for an example.&lt;/div&gt; &lt;div class="col-xs-6 col-sm-3"&gt;.col-xs-6 .col-sm-3&lt;/div&gt; &lt;div class="clearfix visible-xs-block"&gt;&lt;/div&gt; &lt;div class="col-xs-6 col-sm-3"&gt;.col-xs-6 .col-sm-3&lt;/div&gt; &lt;div class="col-xs-6 col-sm-3"&gt;.col-xs-6 .col-sm-3&lt;/div&gt;&lt;/div&gt; 列偏移 嵌套列 列排列列偏移使用 .col-md-offset-* 类可以将列向右侧偏移。这些类实际是通过使用 * 选择器为当前元素增加了左侧的边距（margin）。例如，.col-md-offset-4 类将 .col-md-4 元素向右侧偏移了4个列（column）的宽度。 123456&lt;div class="container"&gt; &lt;div class="row"&gt; &lt;div class="col-md-4"&gt;.col-md-4&lt;/div&gt; &lt;div class="col-md-4 col-md-offset-4"&gt;.col-md-4 .col-md-offset-4&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 嵌套列被嵌套的行（row）所包含的列（column）的个数不能超过12（其实，没有要求你必须占满12列）。 12345678910111213&lt;div class="row"&gt; &lt;div class="col-sm-9"&gt; Level 1: .col-sm-9 &lt;div class="row"&gt; &lt;div class="col-xs-8 col-sm-6"&gt; Level 2: .col-xs-8 .col-sm-6 &lt;/div&gt; &lt;div class="col-xs-4 col-sm-6"&gt; Level 2: .col-xs-4 .col-sm-6 &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 列排列通过使用 .col-md-push-* 和 .col-md-pull-* 类就可以很容易的改变列（column）的顺序。 1234&lt;div class="row"&gt; &lt;div class="col-md-9 col-md-push-3"&gt;.col-md-9 .col-md-push-3&lt;/div&gt;&lt;!-- 向右push推移动3个栅格 --&gt; &lt;div class="col-md-3 col-md-pull-9"&gt;.col-md-3 .col-md-pull-9&lt;/div&gt;&lt;!-- 向左pull拉移动9个栅格 --&gt;&lt;/div&gt; 排版标题HTML 中的所有标题标签，&lt;h1&gt; 到 &lt;h6&gt; 均可使用。另外，还提供了 .h1 到 .h6 类，为的是给内联（inline）属性的文本赋予标题的样式。 在标题内还可以包含 &lt;small&gt; 标签或赋予 .small 类的元素，可以用来标记副标题。 页面主体Bootstrap 将全局 font-size 设置为 14px，line-height 设置为 1.428。这些属性直接赋予 &lt;body&gt; 元素和所有段落元素。另外，&lt;p&gt; （段落）元素还被设置了等于 1/2 行高（即 10px）的底部外边距（margin）。 通过添加 .lead 类可以让段落突出显示。 内联文本元素被删除的文字对于被删除的文本使用 &lt;del&gt; 标签。 无用文本对于没有用的文本使用 &lt;s&gt; 标签 插入文本额外插入的文本使用 &lt;ins&gt; 标签。 带下划线的文本为文本添加下划线，使用 &lt;u&gt; 标签。 小号文本smell、着重strong、斜体em苍白如恶霸创建 文本粗不粗比较擦抹乘客我发你测我看曾经为成为金额vd而维持你问u &lt;b&gt; 用于高亮单词或短语，不带有任何着重的意味；而 &lt;i&gt; 标签主要用于 发言、技术词汇等。 对齐12345&lt;p class="text-left"&gt;Left aligned text.&lt;/p&gt;&lt;p class="text-center"&gt;Center aligned text.&lt;/p&gt;&lt;p class="text-right"&gt;Right aligned text.&lt;/p&gt;&lt;p class="text-justify"&gt;Justified text.&lt;/p&gt;&lt;p class="text-nowrap"&gt;No wrap text.&lt;/p&gt; 改变大小写123&lt;p class="text-lowercase"&gt;Lowercased text.&lt;/p&gt;&lt;p class="text-uppercase"&gt;Uppercased text.&lt;/p&gt;&lt;p class="text-capitalize"&gt;Capitalized text.&lt;/p&gt; 缩略语1&lt;abbr title="attribute"&gt;attr&lt;/abbr&gt; 地址让联系信息以最接近日常使用的格式呈现。在每行结尾添加 &lt;br&gt; 可以保留需要的样式。 1234&lt;address&gt; &lt;strong&gt;Full Name&lt;/strong&gt;&lt;br&gt; &lt;a href="mailto:#"&gt;luobo@tuzi.com&lt;/a&gt;&lt;/address&gt; 引用将任何 HTML 元素包裹在 &lt;blockquote&gt; 中即可表现为引用样式。对于直接引用建议用 &lt;p&gt; 标签。 添加 &lt;footer&gt; 用于标明引用来源。来源的名称可以包裹进 &lt;cite&gt;标签中。 通过赋予 .blockquote-reverse 类可以让引用呈现内容右对齐的效果。 12345678&lt;blockquote&gt; &lt;p&gt;Lorem ipsum dolor sit amet, consectetur adipiscing elit. Integer posuere erat a ante.&lt;/p&gt; &lt;footer&gt;Someone famous in &lt;cite title="Source Title"&gt;Source Title&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;&lt;blockquote class="blockquote-reverse"&gt; ...&lt;/blockquote&gt; 列表123456789101112131415161718&lt;!-- 无样式列表：只针对直接子元素li --&gt;&lt;ul class="list-unstyled"&gt; &lt;li&gt;...&lt;/li&gt;&lt;/ul&gt;&lt;!--通过设置 display: inline-block; 并添加少量的内补（padding），将所有元素放置于同一行。 --&gt;&lt;ul class="list-inline"&gt; &lt;li&gt;...&lt;/li&gt;&lt;/ul&gt;&lt;!--带有描述的短语列表 --&gt;&lt;dl&gt; &lt;dt&gt;...&lt;/dt&gt; &lt;dd&gt;...&lt;/dd&gt;&lt;/dl&gt;&lt;!-- 水平排列的描述：.dl-horizontal 可以让 &lt;dl&gt; 内的短语及其描述排在一行。 --&gt;&lt;dl class="dl-horizontal"&gt; &lt;dt&gt;...&lt;/dt&gt; &lt;dd&gt;...&lt;/dd&gt;&lt;/dl&gt; 自动截断通过 text-overflow 属性，水平排列的描述列表将会截断左侧太长的短语。在较窄的视口（viewport）内，列表将变为默认堆叠排列的布局方式。 表单响应式工具 辅助类 表单详见bootstrap（二） 注：less部分详见less]]></content>
      <categories>
        <category>BootStrap</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>简介</tag>
        <tag>BootStrap</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript对象]]></title>
    <url>%2F2019%2F03%2F09%2FjavaScript%E5%AF%B9%E8%B1%A1%2F</url>
    <content type="text"><![CDATA[JavaScript 中的所有事物都是对象：字符串、数值、数组、函数… 此外，JavaScript 允许自定义对象。 未完待续]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>对象</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript HTML DOM事件]]></title>
    <url>%2F2019%2F03%2F09%2FjavaScriptDOM%2F</url>
    <content type="text"><![CDATA[本篇博客主要讲解HTML DOM（文档对象模型） HTML DOM （文档对象模型）当网页被加载时，浏览器会创建页面的文档对象模型（Document Object Model）。 HTML DOM 模型被构造为对象的树。 JavaScript能够创建动态的HTML JavaScript 能够改变页面中的所有 HTML 元素 JavaScript 能够改变页面中的所有 HTML 属性 JavaScript 能够改变页面中的所有 CSS 样式 JavaScript 能够对页面中的所有事件做出反应 查找 HTML 元素通常，通过 JavaScript，您需要操作 HTML 元素。 为了做到这件事情，您必须首先找到该元素。有三种方法来做这件事： 通过 id 找到 HTML 元素 通过标签名找到 HTML 元素 通过类名找到 HTML 元素 123var x=document.getElementById("main");var z=document.getElementsByClassName("main");var y=document.getElementsByTagName("p"); DOM HTMLHTML DOM 允许 JavaScript 改变 HTML 元素的内容。 改变 HTML 输出流1document.write(Date());//输出时间 提示：绝不要使用在文档加载之后使用 document.write()。这会覆盖该文档。 改变 HTML 内容修改 HTML 内容的最简单的方法时使用 innerHTML 属性。 如需改变 HTML 元素的内容，请使用这个语法： 12document.getElementById(id).innerHTML=new HTML;document.getElementById("p1").innerHTML="New text!"; 改变 HTML 属性如需改变 HTML 元素的属性，请使用这个语法： 12document.getElementById(id).attribute=new value;document.getElementById("image").src="landscape.jpg"; DOM CSS改变 HTML 样式如需改变 HTML 元素的样式，请使用这个语法： 12document.getElementById(id).style.property=new style;document.getElementById("p2").style.color="blue"; HTML DOM Style 对象参考手册 DOM 事件HTML DOM 使 JavaScript 有能力对 HTML 事件做出反应。 对事件做出反应我们可以在事件发生时执行 JavaScript，比如当用户在 HTML 元素上点击时。 如需在用户点击某个元素时执行代码，请向一个 HTML 事件属性添加 JavaScript 代码： 1onclick=JavaScript HTML 事件的例子： 当用户点击鼠标时 当网页已加载时 当图像已加载时 当鼠标移动到元素上时 当输入字段被改变时 当提交 HTML 表单时 当用户触发按键时 1document.getElementById("myBtn").onclick=function()&#123;displayDate()&#125;; onload 和 onunload 事件onload 和 onunload 事件会在用户进入或离开页面时被触发。 onload 事件可用于检测访问者的浏览器类型和浏览器版本，并基于这些信息来加载网页的正确版本。 onload 和 onunload 事件可用于处理 cookie。 1&lt;body onload="checkCookies()"&gt; onchange 事件onchange 事件常结合对输入字段的验证来使用。 下面是一个如何使用 onchange 的例子。当用户改变输入字段的内容时，会调用 function() 函数。 12345678&lt;div&gt; &lt;input type="text" id="fname" onchange="myFunction()&#123; var x=document.getElementById("fname"); x.value=x.value.toUpperCase(); &#125;"&gt; &lt;p&gt;当您离开输入字段时，会触发将输入文本转换为大写的函数。&lt;/p&gt;&lt;/div&gt; onmouseover 和 onmouseout 事件onmouseover 和 onmouseout 事件可用于在用户的鼠标移至 HTML 元素上方或移出元素时触发函数。 onmousedown、onmouseup 以及 onclick 事件onmousedown, onmouseup 以及 onclick 构成了鼠标点击事件的所有部分。首先当点击鼠标按钮时，会触发 onmousedown 事件，当释放鼠标按钮时，会触发 onmouseup 事件，最后，当完成鼠标点击时，会触发 onclick 事件。 DOM 节点添加和删除节点（HTML 元素）。 创建新的 HTML 元素如需向 HTML DOM 添加新元素，您必须首先创建该元素（元素节点），然后向一个已存在的元素追加该元素。 1234567891011121314&lt;div id="div1"&gt; &lt;p id="p1"&gt;这是一个段落&lt;/p&gt; &lt;p id="p2"&gt;这是另一个段落&lt;/p&gt;&lt;/div&gt;&lt;script&gt; var para=document.createElement("p");//创建新的 &lt;p&gt; 元素： var node=document.createTextNode("这是新段落。");//如需向 &lt;p&gt; 元素添加文本，您必须首先创建文本节点。这段代码创建了一个文本节点： para.appendChild(node);//向 &lt;p&gt; 元素追加这个文本节点： //向一个已有的元素追加这个新元素。 var element=document.getElementById("div1");//找到一个已有的元素： element.appendChild(para);//向这个已有的元素追加新元素：&lt;/script&gt; 删除已有的 HTML 元素如需删除 HTML 元素，您必须首先获得该元素的父元素： 12345678910&lt;div id="div1"&gt; &lt;p id="p1"&gt;这是一个段落。&lt;/p&gt; &lt;p id="p2"&gt;这是另一个段落。&lt;/p&gt;&lt;/div&gt;&lt;script&gt; var parent=document.getElementById("div1"); var child=document.getElementById("p1"); parent.removeChild(child);&lt;/script&gt;]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>DOM事件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[JavaScript简介]]></title>
    <url>%2F2019%2F03%2F09%2FjavaScript%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[JavaScript是世界上最流行的脚本语言！ JavaScript 是一种脚本，一门编程语言，它可以在网页上实现复杂的功能，网页展现给你的不再是简单的静态信息，而是实时的内容更新，交互式的地图，2D/3D 动画，滚动播放的视频等等。 您将学到什么JavaScript：写入 HTML 输出12document.write("&lt;h1&gt;This is a heading&lt;/h1&gt;");document.write("&lt;p&gt;This is a paragraph&lt;/p&gt;"); 提示：您只能在 HTML 输出中使用 document.write。如果您在文档加载后使用该方法，会覆盖整个文档。 JavaScript：对事件作出反应1&lt;button type="button" onclick="alert('Welcome!')"&gt;点击这里&lt;/button&gt; alert() 函数在 JavaScript 中并不常用，但它对于代码测试非常方便。 onclick 事件只是您即将在本教程中学到的众多事件之一。 JavaScript：改变 HTML 内容使用 JavaScript 来处理 HTML 内容是非常强大的功能。 12x=document.getElementById("demo") //查找元素x.innerHTML="Hello JavaScript"; //改变内容 您会经常看到 document.getElementByID(“some id“)。这个方法是 HTML DOM 中定义的。 DOM（文档对象模型）是用以访问 HTML 元素的正式 W3C 标准。 您将在本教程的多个章节中学到有关 HTML DOM 的知识。 JavaScript：改变 HTML 图像本例会动态地改变 HTML &lt; image&gt; 的来源 (src)： The Light bulb 点击灯泡就可以打开或关闭这盏灯 亲自试一试 JavaScript 能够改变任意 HTML 元素的大多数属性，而不仅仅是图片。 JavaScript：改变 HTML 样式改变 HTML 元素的样式，属于改变 HTML 属性的变种。 12x=document.getElementById("demo") //找到元素x.style.color="#ff0000"; //改变样式 JavaScript：验证输入JavaScript 常用于验证用户的输入。 1if isNaN(x) &#123;alert("Not Numeric")&#125;; 您知道吗？提示：JavaScript 与 Java 是两种完全不同的语言，无论在概念还是设计上。 Java（由 Sun 发明）是更复杂的编程语言。 ECMA-262 是 JavaScript 标准的官方名称。 JavaScript 由 Brendan Eich 发明。它于 1995 年出现在 Netscape 中（该浏览器已停止更新），并于 1997 年被 ECMA（一个标准协会）采纳。]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
        <tag>简介</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3转换（tranform）]]></title>
    <url>%2F2019%2F03%2F08%2Fcss3%E8%BD%AC%E6%8D%A2%2F</url>
    <content type="text"><![CDATA[本篇博客主要讲解CSS3转换，它包括2d转换，3d转换。 CSS3 2D转换在部分中，您将学到如下 2D 转换方法： translate() rotate() scale() skew() translate() 方法通过 translate() 方法，元素从其当前位置移动，根据给定的 left（x 坐标） 和 top（y 坐标） 位置参数： 123456789div&#123;transform: translate(50px,100px);-ms-transform: translate(50px,100px); /* IE 9 */-webkit-transform: translate(50px,100px); /* Safari and Chrome */-o-transform: translate(50px,100px); /* Opera */-moz-transform: translate(50px,100px); /* Firefox *//*值 translate(50px,100px) 把元素从左侧移动 50 像素，从顶端移动 100 像素。*/&#125; rotate() 方法通过 rotate() 方法，元素顺时针旋转给定的角度。允许负值，元素将逆时针旋转。 123div&#123; tranform: rotate(30deg);/*值 rotate(30deg) 把元素顺时针旋转 30 度。*/&#125; scale() 方法通过 scale() 方法，元素的尺寸会增加或减少，根据给定的宽度（X 轴）和高度（Y 轴）参数： 123div&#123; transform: scale(2,4);;/*值 scale(2,4) 把宽度转换为原始尺寸的 2 倍，把高度转换为原始高度的 4 倍。*/&#125; skew() 方法通过 skew() 方法，元素翻转给定的角度，根据给定的水平线（X 轴）和垂直线（Y 轴）参数： 123div&#123; tranform: skew(30deg,20deg);/*值 skew(30deg,20deg) 围绕 X 轴把元素翻转 30 度，围绕 Y 轴翻转 20 度。*/&#125; CSS3 3D转换在本章中，您将学到其中的一些 3D 转换方法： translate3d() rotate3d() scale3d() skew3d() matrix3d() rotateX()方法rotateX/Y/Z() 方法通过 rotateX() 方法，元素围绕其 X 轴以给定的度数进行旋转。 123456div&#123; transform: rotateX(120deg); -webkit-transform: rotateX(120deg); /* Safari 和 Chrome */ -moz-transform: rotateX(120deg); /* Firefox */&#125; 通过 rotateY() 方法，元素围绕其 Y 轴以给定的度数进行旋转。 123456div&#123; transform: rotateY(130deg); -webkit-transform: rotateY(130deg); /* Safari 和 Chrome */ -moz-transform: rotateY(130deg); /* Firefox */&#125; 总方法rotate3d(x,y,z,angle);参数不允许省略 其他3D属性略]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>-CSS3 -tranform</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3文本和字体]]></title>
    <url>%2F2019%2F03%2F08%2Fcss3%E6%96%87%E6%9C%AC%E5%92%8C%E5%AD%97%E4%BD%93%2F</url>
    <content type="text"><![CDATA[本篇博客主要介绍CSS3文本效果和字体。 CSS3文本效果CSS3包含多个新的文本特性。在本篇博客中主要讲解：text-shadow和word-wrap属性。 浏览器支持Internet Explorer 10、Firefox、Chrome、Safari 以及 Opera 支持 text-shadow 属性。 所有主流浏览器都支持 word-wrap 属性。 注释：Internet Explorer 9 以及更早的版本，不支持 text-shadow 属性。 文本阴影text-shadow属性应用于阴影文本 text-shadow: 水平偏移 竖直偏移 模糊距离 颜色 123h1&#123; text-shadow: 5px 5px 5px #FF0000;&#125; 东吴赤乌白醋维稳成本v我IC不遏必u荣誉本人我把蹙额被称为i不错 自动换行work-break属性：规定非中日韩文本的自动换行规则。 这个属性对英文的兼容性比较好。 word-break: normal|break-all|keep-all;normal：使用浏览器默认的换行规则。break-all：允许在单词内换行。keep-all：只能在半角空格或连字符处换行。 word-wrap属性：允许长单词或 URL 地址换行到下一行。 word-wrap属性中日韩文本方块字不起效果。 word-wrap: normal|break-word;normal：只在允许的断字点换行（浏览器保持默认处理）。break-word：在长单词或 URL 地址内部进行换行。 text-align-last属性text-align-last：设置如何对齐最后一行或紧挨着强制换行符之前的行。 text-align-last：auto| left| right| center| justity（两端对齐)|…. 兼容性不咋地。 text-overflow 属性text-overflow 属性规定当文本溢出包含元素时发生的事情。 text-overflow: clip|ellipsis|string;clip：修剪文本。ellipsis：显示省略符号来代表被修剪的文本。string：使用给定的字符串来代表被修剪的文本。（此属性兼容性不太好） CSS3字体本部分主要讲解@font-face的语法规则，取值说明，字体格式和字体的应用。 1234567891011@font-face&#123; font-family: &lt;YourWenFontName&gt;;/*myfont*/ src: &lt;source&gt;/*url('Sansation_Bold.ttf'), url('Sansation_Bold.eot'); */ font-weight:&lt;weight&gt;; font-style: &lt;style&gt;&#125;div .demo&#123; font-family: myfont;&#125; font-family:name 必需。规定字体的名称。 src:URL 必需。定义字体文件的 URL。 font-style:normal,italic(斜体）,oblique（倾斜） 可选。定义字体的样式。默认是 “normal”。font-weight：normal,bold,100,200…900 可选。定义字体的粗细。默认是 “normal”。 一个字体网站]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
        <tag>文本</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css背景与渐变]]></title>
    <url>%2F2019%2F03%2F05%2Fcss%E8%83%8C%E6%99%AF%E4%B8%8E%E6%B8%90%E5%8F%98%2F</url>
    <content type="text"><![CDATA[本篇博客主要介绍CSS3的背景和渐变新增的部分内容 BackGround属性background-clip属性background-clip属性指定背景绘制区域 语法：background-clip: border-box | padding-box | content-box; 背景绘制区域分别是border/padding/content以内区域 background-origin属性background-origin属性指定background-position属性因该是相对位置 background-origin设置元素背景图片的起始位置 定义背景图片位置，两个值：水平和垂直偏移量 语法：background-origin: border-box | padding-box | content-box; background-size属性background-size属性指定背景图片大小 语法：background-size: length| percentage| cover| contain; background属性整合background: color position size repead origin clip attachment image; 123.demo&#123; background: #123456 center 50% no-repeat content-box content-box fixed url("123.png");&#125;/*不建议这样写*/ CSS3渐变渐变可以在两个或多个指定的颜色之间显示平稳的过渡。 线性渐变沿着一根轴线改变颜色，从起点到终点进行循序渐变（从一边拉向另一边）。 语法：background: linear-gradient(direction.,color-stop1, color-stop2, …); background: linear-gradient(angle, color-stop1, color-stop2, …); 可以设置多个渐变色 direction: to rigiht, to left, to top, to bottom, to right bottom(左上到右下) angle: 0deg(从上到下), 45deg, 90deg(从左到右), 233deg, 180(从下到上)， 270（从右到左) 123456789.demo&#123; background: linear-gradient(to top left, red, yellow, blue); width: 800px; height: 100px; background: linear-gradient(45deg, green, purple, blue); background: linear-gradient(90deg,red 10%, green 50%, purple 75%, blue 100%);/*red：0%~10%*/ background: linear-gradient(90deg,red 0%, green 50%, purple 65%, blue 85%); background: linear-gradient(90deg,rgba(255, 0, 0, 0) , rgba(255,0,0,1);&#125; 第一个颜色默认0%，最后一个颜色默认100%。 重复渐变123demo&#123; background: repeating-linear-gradient(90deg,red 0%, blue 10%, red 20%);&#125; 径向渐变径向渐变(radial-gradients)属性：从起点到终点颜色从内到外进行圆形渐变（从中间往外拉） 语法：background: radial-gradient(center shape size, start-color, …, last-color); shape:ellipse(默认), circle size: closest-side(最近边),farthest-side(最远边),closest-corner(最近角),farthest-cornet(最远角) 重复渐变chrome不支持]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
        <tag>背景</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS3边框与圆角]]></title>
    <url>%2F2019%2F03%2F05%2Fcss%E8%BE%B9%E6%A1%86%E4%B8%8E%E5%9C%86%E8%A7%92%2F</url>
    <content type="text"><![CDATA[本篇博客主要讲解CSS3的圆角，盒阴影和边界图片。 CSS3圆角border-radius属性此部分内容在博客css效果里面已经介绍过了。 四个值 ：左上角 右上角 右下角 左下角 三个值：左上角 右上角和左下角 右下角 考虑兼容性问题，可以加上前缀。 12345678910div&#123; width: 500px; height: 300px; border: 1px solid black; -webkit-broder-radius: 50%;/*chrome*/ -moz-broder-radius: 50%;/*firefox*/ -ms-broder-radius: 50%;/*IE*/ -o-broder-radius: 50%;/*opera*/ broder-radius: 50%;&#125; 盒阴影 box-shadow此部分内容在博客css效果里面已经介绍过了。 边界图片 border-image使用border-image-*属性来构建美丽的可扩展按钮。 语法：border-image: source slice width outset repeat; border-image-source: 指定要使用的图像 ; border-image-slice: 指定图像的边界向内偏移多少; border-image-width: 指定图像边界的宽度; border-image-outset: 指定在边框的外部绘制border-image-area的量; border-image-repeat: 边界是否应重复repeated，拉伸stretched，或铺满rounded; slice和width是相关联的。个人觉得使用%较好。 1234567div&#123; border-image-source: url("boder.jpg"); border-image-slice: number/%/fill;/*10%*/ border-image-width: number/%/auto;/*auto：自动/自适应*/ border-image-outset: length/number; border-image-repeat: stretch/repeat/round/initial/inherit;/*默认：stretch；inittial：读取默认值；inherit：继承父元素*/&#125;]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
        <tag>圆角</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css3选择器]]></title>
    <url>%2F2019%2F03%2F04%2Fcss3%E9%80%89%E6%8B%A9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[本博客主要介绍CSS3新增选择器 基本选择器CSS3发布之前，CSS基本选择器有：通配符选择器（*），元素选择器（div），ID选择器（#id），类选择器（#），后台选择器（空格)。 CSS3新增的基本选择器有子元素选择器，相邻兄弟元素选择器，通用兄弟选择器和群组选择器。 子元素选择器子元素选择器只能选择某元素的子元素 语法：父元素 &gt; 子元素 相邻兄弟元素选择器相邻兄弟元素选择器可以选择紧接在另一个元素后的元素，而且他们具有一个相同的父元素。 语法：元素 + 兄弟相邻元素（第一个）{} 通用兄弟元素选择器通用兄弟元素选择器可以选择某元素后的所有兄弟元素，而且他们具有一个相同的父元素。 语法：元素 ~ 后面所有兄弟相邻元素{} 群组选择器群组选择器是将具有相同样式的元素分组在一起，每个选择器之间使用逗号“，”隔开 语法：元素1，元素2，元素3{CSS语句} 属性选择器对带有指定属性的HTML元素设置样式 使用CSS3属性选择器，你可以只指定元素的某个属性，或者你还可以同时指定元素的某个属性和其对应的属性值。 ELement[attribute]为带有attribute属性的Element元素设置样式 123a[href]&#123; text-decoration: none;&#125;/*所有的a并且有href属性的标签*/ ELement[attribute=”value”]123a[href="www.123.com"]&#123; text-decoration: none;&#125;/*所有的a并且有href===www.123.com属性的标签*/ ELement[attribute~=”value”]123p[class~="two"]&#123; text-decoration: none;&#125;/*&lt;p class="two three"/class="one two"&gt;属性的标签;匹配含有class===two*/ ELement[attribute*=”value”]123p[class*="tw"]&#123; text-decoration: none;&#125;/*匹配包含vaue或以value-开头的元素class*/ 伪类选择器伪元素选择器包括：动态伪类(锚点伪类、用户行为伪类) UI元素状态选择器 CSS3结构类 否定选择器 伪元素选择器 动态伪类这些动态伪类并不存在于HTML中，只有当用户与网站交互的时候才能体现出来 锚点伪类 :link (蓝色链接), :visited(访问过的链接) 用户行为伪类 :hover(鼠标经过), :active(点击时), :focus(获取鼠标) 123456789101112a:link&#123; color:#000000;&#125;a:hover&#123; color:red;&#125;a:active&#123; color:yellow;&#125;a:visited&#123; color:#00ffff;&#125;/*也可以用于其他元素*/ UI元素状态伪类我们把“:enabled”(可输入的), “:disabled”(不可输入的), “:checked”(选中的)伪类成为UI元素状态伪类 123456789input:enabled&#123; color:#123456;&#125;input:disabled&#123; color:#123456;&#125;input:checked&#123; color:#123456;&#125; 123&lt;input type="text" disabled="disabled"&gt;&lt;/input&gt;&lt;input type="text" enable="enable"&gt;&lt;/input&gt;&lt;input type="check" checked="checked"&gt;&lt;/input&gt; CSS3结构类CSS3的：nth选择器 我们把CSS3的：nth选择器也称为CSS3结构类 选择方法 :first-child, :last-child, :nth-child(), :nth-last-child(), :nth-of-type(), :nth-last-of-type(), :first-of-type, :last-of-type, :only-child, :only-of type, :empty :first-child, :last-child, :nth-child(),:nth-last-child()这四个伪类针对子元素，比如div:nth-child()针对div的子元素 div:first-child：选择属于其父元素的首个子元素是div的div元素，并为其设置样式 :last-child：选择属于父元素的最后一个子元素的Element元素，并为其设置样式 :nth-child(N)：匹配属于其父元素的第N个子元素，不论元素的类型。 :nth-last-child(N)：匹配属于父元素的倒数第N个子元素的每个元素，不论元素的类型，从最后一个元素开始计数。 扩展： 第一个元素的下标是1。 :nth-child(n)：n是一个简单的表达式，取值从“0”开始计算。这里只能是“n”，不能用其他字母替换。 123456789101112131415161718.demo:nth-child(2)&#123; color:#123456;&#125;/*匹配第二个元素*/.demo:nth-child(n)&#123; color:#123456;&#125;/*匹配所有元素*/.demo:nth-child(odd/2n+1)&#123; color:#123456;&#125;/*匹配奇数元素*/.demo:nth-child(even/2n)&#123; color:#123456;&#125;/*匹配偶数元素*/.demo:nth-child(3n+1)&#123; color:#123456;&#125;/*3n+1*/.demo:nth-child(n*n)&#123; color:#123456;&#125;/*错误*/ :nth-of-type(), :nth-last-of-type(), :first-of-type, :last-of-type,:one-child, :only-of type这几个伪类针对同名元素，比如div:nth-of-type(N)针对div元素 div:nth-of-type(N)：匹配属于父元素的特定类型（div）第N个子元素（div）的每个元素。所有的属于其父元素（所有元素）第N个div。 :nth-last-of-type(), :first-of-type, :last-of-type：略 div:one-child：针对没有兄弟元素的div元素，比如div:only-of type只有一个div但有两个兄弟元素为p，不会被选中 :only-of type：选择器匹配属于其父元素的特定类型的唯一子元素的每个元素，比如div:only-of type只有一个div但有两个兄弟元素为p，仍会被选中 :empty:empty选择器匹配没有子元素（包括文本节点）的每个元素 123&lt;div&gt;&lt;/div&gt;&lt;!--目标元素--&gt;&lt;div&gt;124&lt;/div&gt;&lt;div&gt;&lt;a&gt;&lt;/a&gt;&lt;/div&gt; 否定选择器（:not）:not(ELement/selector)选择器匹配非指定元素/选择器的每个元素。 语法：父元素:not(子元素/子选择器) ；father:not(chidren/selector) 123456div:not(p)&#123; color:red;&#125;/*不选择p*/a:not(last-of-type)&#123; border-right:1px solid red;&#125;/*不选择最后一个a*/ 伪元素选择器伪元素用于像某些选择器设置特殊效果。 语法：元素::伪元素 / 元素:伪元素 CSS权重什么是权重：当很多的规则被应用到某一个元素上时，权重是一个决定哪种规则生效，或者是优先级的过程。 权重等级与权重：行内样式（1000）&gt;id选择器（100）&gt;类，属性选择器和伪类选择器(10)&gt;元素和伪元素(1)&gt;*(0) 行内样式：&lt; div style=” “ &gt; &lt; /div &gt;,style里面的样式就是行内样式 权重相同的连个css样式，后面的会覆盖前面的样式 first-line根据“first-line”伪元素中的样式对元素的第一行文本进行格式化/执行css样式。first-line伪元素只能用于块级元素。 first-letter用于向文本的首字母设置样式。 first-letter只能用于块级元素 before在元素的内容前面插入新内容 常用”content”配合使用 123456div::before&#123; content:"我在内容的前面"; color:red; display:block; border-right:1px solid green;&#125; 特点：父元素（例如demo里的div)的第一个子元素; 是个行级元素； 内容通过content写入，支持所有的css样式；标签里面找不到 after在元素的内容后面插入新内容 多用于清除浮动 1234567891011div::after&#123; display= block; content: ""; clear: both;/*清除浮动*/&#125;div &gt; aisde&#123; float:left;&#125;div &gt; article&#123; float:right;&#125; 1234&lt;div&gt; &lt;aside&gt;12&lt;/aside&gt; &lt;article&gt;123&lt;/article&gt;&lt;/div&gt; selsection用于设置浏览器中选中文本后的背景色和前景色 12345678div&#123; background: white; color: black;&#125;div::selection&#123; background: red; color: yellow;&#125;]]></content>
      <categories>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>CSS3</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html5表单和input]]></title>
    <url>%2F2019%2F03%2F04%2Fhtml5%E8%A1%A8%E5%8D%95%E5%92%8Cinput%2F</url>
    <content type="text"><![CDATA[本篇博客主要介绍HTML5的属性变化和表单验证。 HTML5属性变化input新增属性电子邮件1&lt;input type="email" name="email"&gt;&lt;/input&gt; URL1&lt;input type=&quot;url&quot; name=&quot;url&quot;&gt;&lt;/input&gt; 电话号码1&lt;input type="tel" name="tel"&gt;&lt;/input&gt; 数字1&lt;input type="number" name="number"&gt;&lt;/input&gt; Date Pickers此input类型包括Date,Month,Week,Time, DateTime(选取时间，日，月，年-使用UTC时间),Date-local(本地时间) 1234&lt;div&gt; Date: &lt;input type="date" name="date"&gt;&lt;/input&gt;&lt;/div&gt; Date: Range Search Color12345&lt;div&gt; &lt;input type="range" name="range" min="1" max="10"&gt;&lt;/input&gt; &lt;input type="search" name="search"&gt;&lt;/input&gt; &lt;input type="color" name="color"&gt;&lt;/input&gt;&lt;/div&gt; 表单属性autocomplete属性自动完成(autocomplete)属性,再次打开网页，网页会记住上次提交的内容。 form或input域应该拥有自动完成功能 &lt; form autocomplete=”on/off”&gt;&lt; /form&gt; PS:autocomplete适用于&lt; form &gt;标签，以及以下类型的&lt; input &gt;标签：text, search, url, telephone, email, password, datepickers, range, color。 12345&lt;form action="https://www.baidu.com" autocomplete="on"&gt; &lt;input type="text" name="text"&gt;&lt;/input&gt; &lt;input type="text" name="text" autocomplete="off"&gt;&lt;/input&gt; &lt;input type="submit"&gt;&lt;/input&gt;&lt;/form&gt; autofocus属性规定在页面加载时，域自动地获得焦点。 autofocus属性使用与所有的&lt; input&gt;标签的类型。 12345&lt;form action="https://www.baidu.com"&gt; &lt;input type="text" name="text"&gt;&lt;/input&gt; &lt;input type="text" name="text" autofocus="autofocus"&gt;&lt;/input&gt;/*用法:autofocus=”autofocus“*/ &lt;input type="submit"&gt;&lt;/input&gt;&lt;/form&gt; multiple(ˈməltəpəl)规定输入域中可选择多个值 PS：multiple属性适用于以下类型的&lt; input&gt;标签：email and file 12345678&lt;form action="https://www.baidu.com"&gt; 请选择文件 &lt;input type="file" name="file"&gt;&lt;/input&gt; &lt;input type="email" name="email" multiple="multiple" value="123@qq.com,234@qq.com"&gt;&lt;/input&gt;/*形成数组发到后台,若无multiple则形成一个字符串发送到后台*/ &lt;input type="file" name="file" multiple="multiple"&gt;&lt;/input&gt;/*用法:multiple="multiple"*/ &lt;input type="submit"&gt;&lt;/input&gt;&lt;/form&gt; 只能选择一个文件 只能选择多个文件 placeholder属性提供一种提示（hint），描述输入域期待的值 适用于&lt; input&gt;标签type属性值为：text, search, telephone, email, password。 12345&lt;form action="https://ww.baidu.com"&gt; &lt;input type="text" name="text"&gt;&lt;/input&gt; &lt;input type="text" name="text" autofocus="autofocus" placeholder="请输入你的银行卡密码"&gt;&lt;/input&gt; &lt;input type="submit"&gt;&lt;/input&gt;&lt;/form&gt; required属性规定必须再提交之前填写输入域（不能为空） 减少前端开发人员写表单验证的压力。 required适用于&lt; form &gt;标签，以及以下类型的&lt; input &gt;标签：text, search, url, telephone, email, password, date pickers, number, checkbox,radio,file。 12345&lt;form action="https://www.baidu.com"&gt; &lt;input type="text" name="text" required="required"&gt;&lt;/input&gt; &lt;input type="email" name="email" required="required"&gt;&lt;/input&gt; &lt;input type="submit"&gt;&lt;/input&gt;&lt;/form&gt; 链接属性sizessizes用在&lt; link&gt;里面 1&lt;link rel="icon" href="icon.gif" type="image/gif" sizes="16X16"&gt; targettarget用在base里面 1&lt;base href="http://localhost/" target="_blank"&gt;/*控制整个网页的超链接&lt; a &gt;*/ 超链接a:media=””(表示对设备进行优化，handheld对“手持”设备进行支持，tv对“电视”设备进行支持)； a:hreflang= “zh-CN”（设置语言） a:rel=“external”（设置超链接的引用，这里超链接为外部链接）。]]></content>
      <categories>
        <category>HTML5</category>
      </categories>
      <tags>
        <tag>HTML5</tag>
        <tag>表单</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html5表单]]></title>
    <url>%2F2019%2F03%2F02%2Fhtml5%E8%A1%A8%E5%8D%95%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[HTML5之网页布局]]></title>
    <url>%2F2019%2F03%2F02%2Fhtml5%E7%BD%91%E9%A1%B5%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[本博客主要介绍HTML5中新增的header等元素对网页整体框架布局的影响。 传统布局 HTML5布局 优点HTML5布局结构更加直白明了。 1、语义化 ：HTML5可以让很多更语义化的结构代码标签代替大量无意义的div标签。这种语义化的特性提升了网页的质量和语义。减少了以前用于css调用class和id属性。 2、 对搜索引擎的友好。新的结构标签带买的是网页布局的改变及提升对搜索引擎的友好。]]></content>
      <tags>
        <tag>HTML5</tag>
        <tag>网页布局</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[走进HTML5]]></title>
    <url>%2F2019%2F03%2F01%2F%E8%B5%B0%E8%BF%9BHTML5%2F</url>
    <content type="text"><![CDATA[2014年，HTML5发布。 HTML5的变化WebAPP：HTML5新增了离线存储、更丰富的表单、js线程、socket、标准扩展embed、css3…… 可以使用开发网页的方式开发webAPP 新增了流媒体与多媒体引擎 ：Audio、vedio、webgldengdeng 在移动互联网方面的优势： 1、跨平台：HTML5是唯一一个通吃PC、Mac、iPhone、Android等主流平台的跨平台语言。 2、快速迭代 3、减低成本：HTML5开发比原生APP开发成本降低一倍。 4、导流入口多：HTML5应用导流非常容易。 5、分发效率高 &lt;!DCOTYPE&gt;标签定义和用法&lt;!DCOTYPE&gt;声明必须是HTML文档的第一行，位于&lt; html &gt;标签之前。 &lt;!DCOTYPE&gt;不是HTML标签，它用来指示web浏览器关于页面使用哪个HTML版本进行编写的指令。 HTML中新增的标签结构标签结构标签（块状元素）——有意义的div &lt; artical &gt; 标记定义一篇文章。 &lt; header &gt; 标记定义一个页面或一个区域的头部 &lt; nav &gt; 标记定义导航链接 &lt; section&gt; 标记定义一个区域；在网页中用途比较大 &lt; aside &gt; 标记定义页面内容部分的侧边栏 &lt; hgroup&gt; 标记定义文件中一个区块的相关信息 &lt; figure &gt; 标记定义一组媒体内容以及它们的标题 &lt; figcaption&gt; 标记定义fgroup元素的标题 &lt; footer &gt; 标记定义一个页面或一个区域的底部 &lt; dialog &gt; 标记定义一个对话框（会话框）类似微信 补充：1、header/secton/aside/article/footer里面不要嵌套使用 123&lt;header&gt; &lt;header&gt;错案案例&lt;/header&gt;&lt;/header&gt; 2、级别：header/secton/footer &gt; aside/article/figure/hgroup/nav &gt; div/figcaption 3、具体标签使用见《布局部分》 多媒体标签&lt; video &gt;标记定义一个视频 demo: 1&lt;vedio src="../123.mp4" controls="controls"&gt;&lt;/vedio&gt; &lt; audio &gt;标记定义音频内容 demo： 123&lt;audio src="../123.mp3" autoplay="autoplay" loop="-1" controls="controls"&gt; autoplay:播放 loop="-1"：无限循环 controls:出现音频控制器&lt;/audio&gt; &lt; source &gt;标记定义媒体资源 demo1: 123&lt;audio autoplay="autoplay"&gt; &lt;source src="../123.mp3" type="audio/mpeg"&gt;&lt;/audio&gt; demo2: 123&lt;vedio autoplay="autoplay" width="1024" height="768"&gt; &lt;source src="../123.mp4" type="vedio/mp4"&gt;&lt;/vedio&gt; &lt; canvas &gt;标记定义图片 &lt; embed &gt;标记定义外部的可交互的内容或插件，比如flashdemo： 123&lt;embed src="../123.swf" width="1024" height="768"&gt; 插入了一个flash文件&lt;/embed&gt; 意义多媒体标签的出现意味着富媒体的发展以及不适用插件的情况先即可操作媒体文件，极大地提升了用户体验。 Web应用标签状态标签&lt; meter &gt; 状态标签（实时状态显示：气温气压） &lt; progress &gt; 状态标签（任务过程：安装、卸载） 12345&lt;meter value="180" min="20" max="380" low="200" high="240" optimum="220"&gt; demo1:电压 optimum:最佳值&lt;/meter&gt;&lt;meter value="0.75"&gt;75%&lt;/meter&gt; demo1:电压 optimum:最佳值 75% 12&lt;progress value="37" max="100"&gt;&lt;/progress&gt;&lt;progress max="100"&gt;&lt;/progress&gt; 其他标签注释标签&lt; ruby &gt; 标记定义注释或音标 &lt; rt &gt; 标记定义对ruby的注释内容文本 &lt; rp &gt; 告诉那些不支持ruby元素的浏览器如何去显示 注：rp不要放在rt内 demo略 mark标签 标记定义有标记的文本 demo： 123&lt;p&gt; 黑ui锋锐&lt;mark&gt;户人&lt;/mark&gt;俄铝比u你咧我恶女i柔儿v人我哦i热女iv繁华如鳄冰鱼&lt;/p&gt; 黑ui锋锐户人俄铝比u你咧我恶女i柔儿v人我哦i热女iv繁华如鳄冰鱼 output标签标记定义一些输出类型，计算表单结果配合使用]]></content>
      <tags>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css动画]]></title>
    <url>%2F2019%2F02%2F27%2Fcss%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[css动画动画的原理：1、大脑的视觉暂留作用。2、 画面逐渐变化。 动画的作用：1、让用户产生愉悦感。2、 引起用户的注意。3、 对用户的操作进行反馈。4、掩饰网页的运算/加载过程。 动画的类型：1、transition补间动画。2、 keyframe关键帧动画。3、 逐帧动画。 补间动画补间动画支撑的操作位置-平移（left/right/margin/transform) 方位-旋转（transform） 大小-缩放（transform） 透明度（opacity） 其他-线性变换（transform） Demo12345678910111213141516171819.container&#123; width: 10px; height: 10px; banckground: red; transition: width 1s; transition: width 1s, background 3s;/*同时设置多个属性*/ transition: all 1s;/*所有*/ transition-delay: 1s;/*定义动画/过渡效果何时开始。*/ transition-duration: 1s;/*规定完成动画效果需要多少秒或毫秒。*/ transition-property: width;/*规定设置动画效果的 CSS 属性的名称。*/ transition-time-function: ease;/*规定速度效果的速度曲线。*/&#125;.container:hover&#123; width: 600px; background: green;&#125; transitionAPI：transition：delay property duration time-function（timing/easing） ； timing的属性可以在网络上寻找。 逐帧动画关键帧动画的一种特殊用法 每一帧都是关键帧（keyframe） 适用于无法补间计算的动画 资源较大、 使用steps() 关键帧动画每一帧之间有动画 keyframe语法1@keyframes animationname &#123;keyframes-selector &#123;css-styles;&#125;&#125; animationname：必需。定义动画的名称。 keyframes-selector：必需。动画时长的百分比。 合法的值： 0-100%from（与 0% 相同）to（与 100% 相同） css-styles：必需。一个或多个合法的 CSS 样式属性。 keyframe定义和用法通过 @keyframes 规则，您能够创建动画。 创建动画的原理是，将一套 CSS 样式逐渐变化为另一套样式。 在动画过程中，您能够多次改变这套 CSS 样式。 以百分比来规定改变发生的时间，或者通过关键词 “from” 和 “to”，等价于 0% 和 100%。 0% 是动画的开始时间，100% 动画的结束时间。 为了获得最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。 注释：请使用动画属性来控制动画的外观，同时将动画与选择器绑定。 animation语法1animation: name duration timing-function delay iteration-count direction; animation定义和用法animation 属性是一个简写属性，用于设置六个动画属性： animation-name：规定需要绑定到选择器的 keyframe 名称。。animation-duration：规定完成动画所花费的时间，以秒或毫秒计。animation-timing-function：规定动画的速度曲线。animation-delay：规定在动画开始之前的延迟。animation-iteration-count：规定动画应该播放的次数。animation-direction：规定是否应该轮流反向播放动画。注释：请始终规定 animation-duration 属性，否则时长为 0，就不会播放动画了。 demo12345678910111213141516.container&#123; width: 100px; height: 100px; border: 1px solid red; banckground: url(../demo.png) no-repeat; animation: mymove 1s infinite; animation-timing-function: steps(1);/*去掉关键帧之间的补间动画*/&#125;@keyframes mymove &#123;0% &#123;top:0px;&#125;25% &#123;top:200px;&#125;50% &#123;top:100px;&#125;75% &#123;top:200px;&#125;100% &#123;top:0px;&#125;&#125;]]></content>
      <tags>
        <tag>css</tag>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css的一些记不住属性集合]]></title>
    <url>%2F2019%2F02%2F26%2Fcss%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E4%B8%8D%E4%BD%8F%E5%B1%9E%E6%80%A7%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[css属性 1234567text-decoration: none;/*链接下划线去除*/box-sizing: border-box;/*盒子宽度从内容content变成border+padding+content*/ text-align: center; border-color: red; text-indent: 20px;/*首行缩进*/ background: url("../img/list-yellow.jpg") 17px 20px no-repeat; background-position-y: -22px; 123456789.clearfix:after&#123; /*清楚浮动*/ content: ' '; display: block; height: 0px; line-height: 0px; clear: both; zoom: 1;&#125; height=line-height可以让文字自动垂直居中]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css效果]]></title>
    <url>%2F2019%2F02%2F26%2Fcss%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[CSS效果简介本篇博客介绍css中的一些效果，比如：box-shadow、text-shadow、border-radius、background、clip-path、3D-tranform等。 通过本博客的学习，你可是通过CSS实现一些特殊的效果，阴影，动画等。css的效果也被称为css最出彩的一部分。 box-shadow（投影）介绍 外阴影： 24px：投影的模糊区域大小（模糊区域） 40px：投影在border box shape的基础上要扩展多少.为负值的时候投影缩小（拓展区域） 64px 64px：投影相对于原元素的偏移（偏移位置） rgba：投影颜色和透明度 1box-shadow：0 0 0 15px red 上述代码相当也给元素加了一个15px宽的外边框。此外边框和border不同的是不占据空间。元素的宽高保持不变。 外阴影 此文字可以显示在上一段的“外边框”部分 12box-shadow：0 0 0 15px red，12px 12px 5px 8px green; 上述代码会形成两个投影，而不是替代第一个投影。 利用此特性可以使用一个div完成一个复杂的图形。 内阴影：比外阴影多一个inset属性 。inset可以写在最前或最后。 优点营造层次感（立体感） 充当没有宽度的边框（不会占据空间，不影响排版） 特殊效果：无线投影 text-shadow（文本投影）特性立体感 印刷品质感（字体边缘有模糊，类似图书） 《背影》 我与父亲不相见已二年余了，我最不能忘记的是他的背影。那年冬天，祖母死了，父亲的差使也交卸了，正是祸不单行的日子，我从北京到徐州，打算跟着父亲奔丧回家。到徐州见着父亲，看见满院狼藉的东西，又想起祖母，不禁簌簌地流下眼泪。父亲说，“事已如此，不必难过，好在天无绝人之路！” 回家变卖典质，父亲还了亏空；又借钱办了丧事。这些日子，家中光景很是惨淡，一半为了丧事，一半为了父亲赋闲。丧事完毕，父亲要到南京谋事，我也要回北京念书，我们便同行。 到南京时，有朋友约去游逛，勾留了一日；第二日上午便须渡江到浦口，下午上车北去。父亲因为事忙，本已说定不送我，叫旅馆里一个熟识的茶房陪我同去。他再三嘱咐茶房，甚是仔细。但他终于不放心，怕茶房不妥帖；颇踌躇了一会。其实我那年已二十岁，北京已来往过两三次，是没有甚么要紧的了。他踌躇了一会，终于决定还是自己送我去。我两三回劝他不必去；他只说，“不要紧，他们去不好！” border-radius（圆角）效果圆角矩形 圆形 半圆/扇形 一些奇奇怪怪的角 demo: 倒数第二个还可以设置：border-top-left-radius、border-top-right-radius、border-bottom-left-radius、border-bottom-right-radius最后一个设置的垂直和水平方向不同的半径。 background（背景）效果纹理，图片，渐变 雪碧图动画 背景图尺寸自适应 背景图自适应1234567891011.background&#123; width:400px; height:300px; border:1px solid red; background:url(../demo.png); background-position:center center;/*居中 center top水平居中垂直靠顶*/ background-repeat: no-repeat;/*repeat-x repeat-y 横向/纵向 重复*/ background-size: 200px 100px;/*也可以使用百分比*/ background-size:cover;/*图片覆盖整个容器同时长宽比不变，多余的隐藏*/ background-size:container;/*图片覆盖整个容器同时长宽比不变，图片完整显示，无法显示的部分为空白*/&#125; clip-path（使用较少，但神奇）功能对容器进行裁剪 常见几何图形 自定义路径裁剪 Demo12345678910111213141516171819.background&#123; width:400px; height:300px; border:1px solid red; background:url(../demo.png); background-position:center center; background-repeat: no-repeat; background-size:cover; clip-path: inset(100px 50px);/*显示矩形 宽100px*/ clip-path: circle(50px at 100px 100px);/*在相对左上（100px，100px）位置显示一个半径50px的圆 在加上一个鼠标事件可以做一个很棒的动画*/ clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0 50%);/*多边形 指定了几个关键的点（x=50%*width,y=0%*height).可以定义无限多个点，画出各种形状*/ /*clip-path: url(#clipPath);html里面有一个class="clipPath"的元素*/ /*与下面hover相衬*/ transition: clip-path .4s;/*动画*/&#125;.background:hover&#123; clip-path: circle(80px at 100px 100px);&#125; svg+clip-path部分略。 clip-path功能强大，但有一些浏览器兼容性不好，甚至会报错。 3D-tranform（3d变换）略]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css布局——float、inline-block、响应式布局]]></title>
    <url>%2F2019%2F02%2F17%2Fcss%E5%B8%83%E5%B1%80%E2%80%94%E2%80%94float%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[本篇博客主要介绍float布局、inline-block布局和响应式布局。 float布局特点：元素浮动 脱离文档流 但不脱离文本流 对自身的影响：1、形成“块”(BFC) 这个“块”负责自己的布局，比如可以设置自己的宽高。2、位置尽量靠上。 3、位置尽量靠左（右）。 对兄弟的影响：1、上面贴非float元素。 2、旁边贴float元素。3、不影响其他块级元素位置（即脱离文档流）。4、影响其他块级元素内部文本（即不脱离文本流）。 对父级元素的影响：1、从布局上”消失“ ，可能造成高度塌陷。 避免高度塌陷：1、让父元素也变成“块” 123.father&#123; overflow:auto;/*or hidden*/&#125; 2、设置一个元素超出浮动部分，撑起布局。常用清除浮动方式。 1234567.clearfix::after&#123; content: ''; clear: both; display: block; visibility: hidden; height: 0;&#125; float布局案例实现两栏三栏布局 inline-block布局特点1、像文本一样并列排起来。 2、没有清楚浮动等问题 3、需要处理间隙 如何处理间隙1、父元素：font-size=0；子元素（display=inline-block）：font-size=14px（此处字体大小根据实际情况自定义）； 2、采用注释的方式，一般不采用。 缺点对自适应大小的元素不友好，一般用来给顶宽的元素进行布局。 响应式设计和布局什么是响应式布局1、使页面在不同设备上正常使用 2、一般主要处理屏幕大小的问题 3、是否有鼠标、是否是读屏、是否支持一些样式 响应式主要方法：隐藏+折行+自适应空间 布局结构必须在开始写代码之前就确定好。 隐藏：确定那一部分在移动端是可以隐藏的 折行：类似特性列表，从横排变成一行显示一个或两个 具体方法： rem：通过html的字体大小来确定元素字体大小的方法。通过给不同大小的屏幕不同的字号来进行布局。 viewport：媒体查询，用js或手工确定屏幕多大。 media query：根据不同设备的特性来匹配不同的样式。]]></content>
      <tags>
        <tag>css</tag>
        <tag>float</tag>
        <tag>inline-block</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css布局知识点详解]]></title>
    <url>%2F2019%2F02%2F16%2Fcss%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[css布局基础知识常用的布局方法 table表格布局 float浮动＋margin inline-block布局 flexbox布局 盒模型 盒模型从内到外依次是margin（外边距）、border（边框）、padding（内边距）、content（内容）。一般说的width和height是指content（内容）的宽度和高度。 display/position属性作用： &nbsp;&nbsp;· display确定元素的显示类型 ​ &nbsp;&nbsp;&nbsp;· block/inline/inline-block &nbsp;&nbsp;·position确定元素的位置 ​ · static（静态、默认）/relative（相对）/absolute（绝对）/fixed（固定） block 有独立宽高，默认占据一行 inline 和文本一样，默认不会占据一行 inline-block 对外表现像一个inline，对内/内部表现为block。可以有宽高. static静态/默认布局，出现在应该出现的位置。 relativedemo: 12345.demo&#123; position:relative; left:10px; top:10px;&#125; 上述代码块的作用的使class=demo的元素位置相对于其static的位置：离左边10px，里上边10px（向右向下移动10px）。 absolutedemo: 12345.demo&#123; position:absolute; left:80px; top:30px;&#125; 元素一旦设置为absolute布局就从文档流中脱离了，后续的元素的位置不受此元素的影响。 其定位使相对于最近的父级absolute或relative布局的元素位置。 fixeddemo： 12345.demo&#123; position:fixed; left:10px; bottom:10px;&#125; fixed也是脱离文档流的，但其位置使相对于浏览器可视界面的。 注：定位为relative、absolute、fixed布局的元素可以设置z-index属性。z-index属性使元素在 &nbsp;z轴 的位置。使用方法为：z-index：2；数值越大位置越靠“上” flexbox布局 先简单介绍一下用法：父级元素：diaplay：flex；子元素：flex：1 ，2，3，····;flex的数值表示该元素占据的大小。如果子元素要设置为固定宽度：width:80px; flex:none;]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jquery学习笔记]]></title>
    <url>%2F2019%2F02%2F15%2Fjquery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[jquery学习笔记]]></content>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tuzi的第一篇博客]]></title>
    <url>%2F2019%2F02%2F15%2Fhello%2F</url>
    <content type="text"><![CDATA[hello ，这是我的第一篇博客！记·二月五号早晨做的梦 做了个有意思的梦 关于一本书 不知道书名 关于校园和成长 之前梦里读过 今天 书要拍电影 地点选在了我初中 开机前 在一个莫名其妙的晚会 见到了刘亦菲 还要了张合影 开机仪式就在学校 因为今天是春节吧 只记得一直放炮 不过 快结束的时候 刘亦菲给我发QQ消息 两个人聊了起来 莫名其妙有了刘亦菲QQ 然后就醒了 最后 新年快乐，各位 ——内容复制自我的说说 刘亦菲：]]></content>
      <tags>
        <tag>tuzi</tag>
        <tag>frist</tag>
      </tags>
  </entry>
</search>
