<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[走进HTML5]]></title>
    <url>%2F2019%2F03%2F01%2F%E8%B5%B0%E8%BF%9BHTML5%2F</url>
    <content type="text"></content>
      <tags>
        <tag>HTML</tag>
        <tag>HTML5</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css动画]]></title>
    <url>%2F2019%2F02%2F27%2Fcss%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[css动画动画的原理：1、大脑的视觉暂留作用。2、 画面逐渐变化。 动画的作用：1、让用户产生愉悦感。2、 引起用户的注意。3、 对用户的操作进行反馈。4、掩饰网页的运算/加载过程。 动画的类型：1、transition补间动画。2、 keyframe关键帧动画。3、 逐帧动画。 补间动画补间动画支撑的操作位置-平移（left/right/margin/transform) 方位-旋转（transform） 大小-缩放（transform） 透明度（opacity） 其他-线性变换（transform） Demo12345678910111213141516171819.container&#123; width: 10px; height: 10px; banckground: red; transition: width 1s; transition: width 1s, background 3s;/*同时设置多个属性*/ transition: all 1s;/*所有*/ transition-delay: 1s;/*定义动画/过渡效果何时开始。*/ transition-duration: 1s;/*规定完成动画效果需要多少秒或毫秒。*/ transition-property: width;/*规定设置动画效果的 CSS 属性的名称。*/ transition-time-function: ease;/*规定速度效果的速度曲线。*/&#125;.container:hover&#123; width: 600px; background: green;&#125; transitionAPI：transition：delay property duration time-function（timing/easing） ； timing的属性可以在网络上寻找。 逐帧动画关键帧动画的一种特殊用法 每一帧都是关键帧（keyframe） 适用于无法补间计算的动画 资源较大、 使用steps() 关键帧动画每一帧之间有动画 keyframe语法1@keyframes animationname &#123;keyframes-selector &#123;css-styles;&#125;&#125; animationname：必需。定义动画的名称。 keyframes-selector：必需。动画时长的百分比。 合法的值： 0-100%from（与 0% 相同）to（与 100% 相同） css-styles：必需。一个或多个合法的 CSS 样式属性。 keyframe定义和用法通过 @keyframes 规则，您能够创建动画。 创建动画的原理是，将一套 CSS 样式逐渐变化为另一套样式。 在动画过程中，您能够多次改变这套 CSS 样式。 以百分比来规定改变发生的时间，或者通过关键词 “from” 和 “to”，等价于 0% 和 100%。 0% 是动画的开始时间，100% 动画的结束时间。 为了获得最佳的浏览器支持，您应该始终定义 0% 和 100% 选择器。 注释：请使用动画属性来控制动画的外观，同时将动画与选择器绑定。 animation语法1animation: name duration timing-function delay iteration-count direction; animation定义和用法animation 属性是一个简写属性，用于设置六个动画属性： animation-name：规定需要绑定到选择器的 keyframe 名称。。animation-duration：规定完成动画所花费的时间，以秒或毫秒计。animation-timing-function：规定动画的速度曲线。animation-delay：规定在动画开始之前的延迟。animation-iteration-count：规定动画应该播放的次数。animation-direction：规定是否应该轮流反向播放动画。注释：请始终规定 animation-duration 属性，否则时长为 0，就不会播放动画了。 demo12345678910111213141516.container&#123; width: 100px; height: 100px; border: 1px solid red; banckground: url(../demo.png) no-repeat; animation: mymove 1s infinite; animation-timing-function: steps(1);/*去掉关键帧之间的补间动画*/&#125;@keyframes mymove &#123;0% &#123;top:0px;&#125;25% &#123;top:200px;&#125;50% &#123;top:100px;&#125;75% &#123;top:200px;&#125;100% &#123;top:0px;&#125;&#125;]]></content>
      <tags>
        <tag>css</tag>
        <tag>动画</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css的一些记不住属性集合]]></title>
    <url>%2F2019%2F02%2F26%2Fcss%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AE%B0%E4%B8%8D%E4%BD%8F%E5%B1%9E%E6%80%A7%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[css属性 1234567text-decoration: none;/*链接下划线去除*/box-sizing: border-box;/*盒子宽度从内容content变成border+padding+content*/ text-align: center; border-color: red; text-indent: 20px;/*首行缩进*/ background: url("../img/list-yellow.jpg") 17px 20px no-repeat; background-position-y: -22px; 123456789.clearfix:after&#123; /*清楚浮动*/ content: ' '; display: block; height: 0px; line-height: 0px; clear: both; zoom: 1;&#125; height=line-height可以让文字自动垂直居中]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css效果]]></title>
    <url>%2F2019%2F02%2F26%2Fcss%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[CSS效果简介本篇博客介绍css中的一些效果，比如：box-shadow、text-shadow、border-radius、background、clip-path、3D-tranform等。 通过本博客的学习，你可是通过CSS实现一些特殊的效果，阴影，动画等。css的效果也被称为css最出彩的一部分。 box-shadow（投影）介绍 外阴影： 24px：投影的模糊区域大小（模糊区域） 40px：投影在border box shape的基础上要扩展多少.为负值的时候投影缩小（拓展区域） 64px 64px：投影相对于原元素的偏移（偏移位置） rgba：投影颜色和透明度 1box-shadow：0 0 0 15px red 上述代码相当也给元素加了一个15px宽的外边框。此外边框和border不同的是不占据空间。元素的宽高保持不变。 外阴影 此文字可以显示在上一段的“外边框”部分 12box-shadow：0 0 0 15px red，12px 12px 5px 8px green; 上述代码会形成两个投影，而不是替代第一个投影。 利用此特性可以使用一个div完成一个复杂的图形。 内阴影：比外阴影多一个inset属性 。inset可以写在最前或最后。 优点营造层次感（立体感） 充当没有宽度的边框（不会占据空间，不影响排版） 特殊效果：无线投影 text-shadow（文本投影）特性立体感 印刷品质感（字体边缘有模糊，类似图书） 《背影》 我与父亲不相见已二年余了，我最不能忘记的是他的背影。那年冬天，祖母死了，父亲的差使也交卸了，正是祸不单行的日子，我从北京到徐州，打算跟着父亲奔丧回家。到徐州见着父亲，看见满院狼藉的东西，又想起祖母，不禁簌簌地流下眼泪。父亲说，“事已如此，不必难过，好在天无绝人之路！” 回家变卖典质，父亲还了亏空；又借钱办了丧事。这些日子，家中光景很是惨淡，一半为了丧事，一半为了父亲赋闲。丧事完毕，父亲要到南京谋事，我也要回北京念书，我们便同行。 到南京时，有朋友约去游逛，勾留了一日；第二日上午便须渡江到浦口，下午上车北去。父亲因为事忙，本已说定不送我，叫旅馆里一个熟识的茶房陪我同去。他再三嘱咐茶房，甚是仔细。但他终于不放心，怕茶房不妥帖；颇踌躇了一会。其实我那年已二十岁，北京已来往过两三次，是没有甚么要紧的了。他踌躇了一会，终于决定还是自己送我去。我两三回劝他不必去；他只说，“不要紧，他们去不好！” border-radius（圆角）效果圆角矩形 圆形 半圆/扇形 一些奇奇怪怪的角 demo: 倒数第二个还可以设置：border-top-left-radius、border-top-right-radius、border-bottom-left-radius、border-bottom-right-radius最后一个设置的垂直和水平方向不同的半径。 background（背景）效果纹理，图片，渐变 雪碧图动画 背景图尺寸自适应 背景图自适应1234567891011.background&#123; width:400px; height:300px; border:1px solid red; background:url(../demo.png); background-position:center center;/*居中 center top水平居中垂直靠顶*/ background-repeat: no-repeat;/*repeat-x repeat-y 横向/纵向 重复*/ background-size: 200px 100px;/*也可以使用百分比*/ background-size:cover;/*图片覆盖整个容器同时长宽比不变，多余的隐藏*/ background-size:container;/*图片覆盖整个容器同时长宽比不变，图片完整显示，无法显示的部分为空白*/&#125; clip-path（使用较少，但神奇）功能对容器进行裁剪 常见几何图形 自定义路径裁剪 Demo12345678910111213141516171819.background&#123; width:400px; height:300px; border:1px solid red; background:url(../demo.png); background-position:center center; background-repeat: no-repeat; background-size:cover; clip-path: inset(100px 50px);/*显示矩形 宽100px*/ clip-path: circle(50px at 100px 100px);/*在相对左上（100px，100px）位置显示一个半径50px的圆 在加上一个鼠标事件可以做一个很棒的动画*/ clip-path: polygon(50% 0%, 100% 50%, 50% 100%, 0 50%);/*多边形 指定了几个关键的点（x=50%*width,y=0%*height).可以定义无限多个点，画出各种形状*/ /*clip-path: url(#clipPath);html里面有一个class="clipPath"的元素*/ /*与下面hover相衬*/ transition: clip-path .4s;/*动画*/&#125;.background:hover&#123; clip-path: circle(80px at 100px 100px);&#125; svg+clip-path部分略。 clip-path功能强大，但有一些浏览器兼容性不好，甚至会报错。 3D-tranform（3d变换）略]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css布局——float、inline-block、响应式布局]]></title>
    <url>%2F2019%2F02%2F17%2Fcss%E5%B8%83%E5%B1%80%E2%80%94%E2%80%94float%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[简介本篇博客主要介绍float布局、inline-block布局和响应式布局。 float布局特点：元素浮动 脱离文档流 但不脱离文本流 对自身的影响：1、形成“块”(BFC) 这个“块”负责自己的布局，比如可以设置自己的宽高。2、位置尽量靠上。 3、位置尽量靠左（右）。 对兄弟的影响：1、上面贴非float元素。 2、旁边贴float元素。3、不影响其他块级元素位置（即脱离文档流）。4、影响其他块级元素内部文本（即不脱离文本流）。 对父级元素的影响：1、从布局上”消失“ ，可能造成高度塌陷。 避免高度塌陷：1、让父元素也变成“块” 123.father&#123; overflow:auto;/*or hidden*/&#125; 2、设置一个元素超出浮动部分，撑起布局。常用清除浮动方式。 1234567.clearfix::after&#123; content: ''; clear: both; display: block; visibility: hidden; height: 0;&#125; float布局案例实现两栏三栏布局 inline-block布局特点1、像文本一样并列排起来。 2、没有清楚浮动等问题 3、需要处理间隙 如何处理间隙1、父元素：font-size=0；子元素（display=inline-block）：font-size=14px（此处字体大小根据实际情况自定义）； 2、采用注释的方式，一般不采用。 缺点对自适应大小的元素不友好，一般用来给顶宽的元素进行布局。 响应式设计和布局什么是响应式布局1、使页面在不同设备上正常使用 2、一般主要处理屏幕大小的问题 3、是否有鼠标、是否是读屏、是否支持一些样式 响应式主要方法：隐藏+折行+自适应空间 布局结构必须在开始写代码之前就确定好。 隐藏：确定那一部分在移动端是可以隐藏的 折行：类似特性列表，从横排变成一行显示一个或两个 具体方法： rem：通过html的字体大小来确定元素字体大小的方法。通过给不同大小的屏幕不同的字号来进行布局。 viewport：媒体查询，用js或手工确定屏幕多大。 media query：根据不同设备的特性来匹配不同的样式。]]></content>
      <tags>
        <tag>css</tag>
        <tag>float</tag>
        <tag>inline-block</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[css布局知识点详解]]></title>
    <url>%2F2019%2F02%2F16%2Fcss%E5%B8%83%E5%B1%80%2F</url>
    <content type="text"><![CDATA[css布局基础知识常用的布局方法 table表格布局 float浮动＋margin inline-block布局 flexbox布局 盒模型 盒模型从内到外依次是margin（外边距）、border（边框）、padding（内边距）、content（内容）。一般说的width和height是指content（内容）的宽度和高度。 display/position属性作用： &nbsp;&nbsp;· display确定元素的显示类型 ​ &nbsp;&nbsp;&nbsp;· block/inline/inline-block &nbsp;&nbsp;·position确定元素的位置 ​ · static（静态、默认）/relative（相对）/absolute（绝对）/fixed（固定） block 有独立宽高，默认占据一行 inline 和文本一样，默认不会占据一行 inline-block 对外表现像一个inline，对内/内部表现为block。可以有宽高. static静态/默认布局，出现在应该出现的位置。 relativedemo: 12345.demo&#123; position:relative; left:10px; top:10px;&#125; 上述代码块的作用的使class=demo的元素位置相对于其static的位置：离左边10px，里上边10px（向右向下移动10px）。 absolutedemo: 12345.demo&#123; position:absolute; left:80px; top:30px;&#125; 元素一旦设置为absolute布局就从文档流中脱离了，后续的元素的位置不受此元素的影响。 其定位使相对于最近的父级absolute或relative布局的元素位置。 fixeddemo： 12345.demo&#123; position:fixed; left:10px; bottom:10px;&#125; fixed也是脱离文档流的，但其位置使相对于浏览器可视界面的。 注：定位为relative、absolute、fixed布局的元素可以设置z-index属性。z-index属性使元素在 &nbsp;z轴 的位置。使用方法为：z-index：2；数值越大位置越靠“上” flexbox布局 先简单介绍一下用法：父级元素：diaplay：flex；子元素：flex：1 ，2，3，····;flex的数值表示该元素占据的大小。如果子元素要设置为固定宽度：width:80px; flex:none;]]></content>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[jquery学习笔记]]></title>
    <url>%2F2019%2F02%2F15%2Fjquery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[jquery学习笔记]]></content>
      <tags>
        <tag>jquery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[tuzi的第一篇博客]]></title>
    <url>%2F2019%2F02%2F15%2Fhello%2F</url>
    <content type="text"><![CDATA[hello ，这是我的第一篇博客！记·二月五号早晨做的梦 做了个有意思的梦 关于一本书 不知道书名 关于校园和成长 之前梦里读过 今天 书要拍电影 地点选在了我初中 开机前 在一个莫名其妙的晚会 见到了刘亦菲 还要了张合影 开机仪式就在学校 因为今天是春节吧 只记得一直放炮 不过 快结束的时候 刘亦菲给我发QQ消息 两个人聊了起来 莫名其妙有了刘亦菲QQ 然后就醒了 最后 新年快乐，各位 ——内容复制自我的说说 刘亦菲：]]></content>
      <tags>
        <tag>tuzi</tag>
        <tag>frist</tag>
      </tags>
  </entry>
</search>
